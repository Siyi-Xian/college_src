#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.6 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 32 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 102 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 6 #"Menlo\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 192 46 214 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 57 89 216 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
38 #"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 0 1
#"\0"
0 75 1 #"\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 20 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 38 38 128 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 194 116 31 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 41 128 38 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 132 60 36 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 81 112 203 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 178 34 34 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 68 0 203 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 116 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 139 142 28 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0 0
0 0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 148 0 211 0
0 0 -1 -1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
0.0 12 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0.0 12 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
0 -1 45 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 47 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 65 105 225 0
0 0 -1 -1 25 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 0 1 #"\0"
0 75 6 #"Menlo\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 255 255
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 192 46 214 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 57 89 216 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 255 255
0 0 0 -1 -1 0 1 #"\0"
0 75 6 #"Menlo\0"
0.0 15 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 6 #"Menlo\0"
0.0 16 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 22 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 19 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
0.0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0.0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1           0 1907 0 4 3 85
(
 #";; The first three lines of this file were inserted by DrRacket. The"
 #"y record metadata"
) 0 0 4 29 1 #"\n"
0 0 4 3 85
(
 #";; about the language level of this file in a form that our tools ca"
 #"n easily process."
) 0 0 4 29 1 #"\n"
0 0 4 3 206
(
 #"#reader(lib \"htdp-intermediate-lambda-reader.ss\" \"lang\")((modnam"
 #"e |Assignment-10-Siyi Xian|) (read-case-sensitive #t) (teachpacks ()"
 #") (htdp-settings #(#t constructor repeating-decimal #f #t none #f ()"
 #" #f)))"
) 0 0 4 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 7 #"require"
0 0 25 3 1 #" "
0 0 14 3 11 #"2htdp/image"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 7 #"require"
0 0 25 3 1 #" "
0 0 14 3 14 #"2htdp/universe"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 24 #"; A PrefixTree (PT) is a"
0 0 25 29 1 #"\n"
0 0 17 3 14 #"; | (make-end)"
0 0 25 29 1 #"\n"
0 0 17 3 8 #"; | Node"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 24 #"; An End is : (make-end)"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 25 3 1 #" "
0 0 14 3 3 #"end"
0 0 25 3 4 #" [])"
0 0 25 29 1 #"\n"
0 0 17 3 58
#"; A Node is : (make-node [Character or Empty] [ListOf PT])"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 25 3 1 #" "
0 0 14 3 4 #"node"
0 0 25 3 2 #" ("
0 0 14 3 4 #"char"
0 0 25 3 1 #" "
0 0 14 3 5 #"nodes"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 3 #"pt1"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\o"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"            ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\n"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 29 1 #"\n"
0 0 25 3 36 #"                                   ("
0 0 14 3 8 #"make-end"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 36 #"                                   ("
0 0 14 3 9 #"make-node"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\e"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 8 #"make-end"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 3 19 #"                  ("
0 0 14 3 9 #"make-node"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\f"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 29 1 #"\n"
0 0 25 3 36 #"                                   ("
0 0 14 3 8 #"make-end"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 36 #"                                   ("
0 0 14 3 9 #"make-node"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\f"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 8 #"make-end"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 36 #"                                   ("
0 0 14 3 9 #"make-node"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\t"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 8 #"make-end"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 3 19 #"                  ("
0 0 14 3 9 #"make-node"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\r"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 8 #"make-end"
0 0 25 3 6 #"))))))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 3 #"pt0"
0 0 25 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 25 3 1 #" "
0 0 14 3 5 #"empty"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 14 3 3 #"pt1"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 12 #"; Exercise 1"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 34 #"; [ListOf Character] PT -> Boolean"
0 0 25 29 1 #"\n"
0 0 17 3 76
(
 #"; Check if the given list of characters (a word) is in the given pre"
 #"fix tree"
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 6 #"match?"
0 0 25 3 1 #" "
0 0 14 3 2 #"lc"
0 0 25 3 1 #" "
0 0 14 3 2 #"pt"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 3 #"and"
0 0 25 3 2 #" ("
0 0 14 3 4 #"end?"
0 0 25 3 1 #" "
0 0 14 3 2 #"pt"
0 0 25 3 3 #") ("
0 0 14 3 6 #"empty?"
0 0 25 3 1 #" "
0 0 14 3 2 #"lc"
0 0 25 3 3 #")) "
0 0 22 3 5 #"#true"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 2 #"or"
0 0 25 3 2 #" ("
0 0 14 3 4 #"end?"
0 0 25 3 1 #" "
0 0 14 3 2 #"pt"
0 0 25 3 3 #") ("
0 0 14 3 6 #"empty?"
0 0 25 3 1 #" "
0 0 14 3 2 #"lc"
0 0 25 3 3 #")) "
0 0 22 3 6 #"#false"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 25 3 2 #" ("
0 0 14 3 9 #"node-char"
0 0 25 3 1 #" "
0 0 14 3 2 #"pt"
0 0 25 3 4 #")) ("
0 0 14 3 5 #"foldr"
0 0 25 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 25 3 2 #" ("
0 0 14 3 1 #"c"
0 0 25 3 1 #" "
0 0 14 3 1 #"r"
0 0 25 3 3 #") ("
0 0 14 3 2 #"or"
0 0 25 3 2 #" ("
0 0 14 3 6 #"match?"
0 0 25 3 1 #" "
0 0 14 3 2 #"lc"
0 0 25 3 1 #" "
0 0 14 3 1 #"c"
0 0 25 3 2 #") "
0 0 14 3 1 #"r"
0 0 25 3 3 #")) "
0 0 22 3 6 #"#false"
0 0 25 3 2 #" ("
0 0 14 3 10 #"node-nodes"
0 0 25 3 1 #" "
0 0 14 3 2 #"pt"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 3 #"and"
0 0 25 3 2 #" ("
0 0 14 3 6 #"char=?"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 2 #"lc"
0 0 25 3 3 #") ("
0 0 14 3 9 #"node-char"
0 0 25 3 1 #" "
0 0 14 3 2 #"pt"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 5 #"foldr"
0 0 25 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 25 3 2 #" ("
0 0 14 3 1 #"c"
0 0 25 3 1 #" "
0 0 14 3 1 #"r"
0 0 25 3 3 #") ("
0 0 14 3 2 #"or"
0 0 25 3 2 #" ("
0 0 14 3 6 #"match?"
0 0 25 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 2 #"lc"
0 0 25 3 2 #") "
0 0 14 3 1 #"c"
0 0 25 3 2 #") "
0 0 14 3 1 #"r"
0 0 25 3 3 #")) "
0 0 22 3 6 #"#false"
0 0 25 3 2 #" ("
0 0 14 3 10 #"node-nodes"
0 0 25 3 1 #" "
0 0 14 3 2 #"pt"
0 0 25 3 6 #")))]))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 6 #"match?"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\o"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\f"
0 0 25 3 2 #") "
0 0 14 3 3 #"pt0"
0 0 25 3 2 #") "
0 0 22 3 5 #"#true"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 6 #"match?"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\u"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\p"
0 0 25 3 2 #") "
0 0 14 3 3 #"pt0"
0 0 25 3 2 #") "
0 0 22 3 6 #"#false"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 6 #"match?"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\o"
0 0 25 3 2 #") "
0 0 14 3 3 #"pt0"
0 0 25 3 2 #") "
0 0 22 3 6 #"#false"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 6 #"match?"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\o"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\f"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\t"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\e"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\n"
0 0 25 3 2 #") "
0 0 14 3 3 #"pt0"
0 0 25 3 2 #") "
0 0 22 3 6 #"#false"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 12 #"; Exercise 2"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 17 #"; String -> Image"
0 0 25 29 1 #"\n"
0 0 17 3 64
#"; Draws a node image for the given character (one length string)"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 11 #"char->image"
0 0 25 3 1 #" "
0 0 14 3 1 #"c"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 7 #"overlay"
0 0 25 3 2 #" ("
0 0 14 3 4 #"text"
0 0 25 3 1 #" "
0 0 14 3 1 #"c"
0 0 25 3 1 #" "
0 0 22 3 2 #"20"
0 0 25 3 1 #" "
0 0 19 3 7 #"\"black\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 6 #"circle"
0 0 25 3 1 #" "
0 0 22 3 2 #"18"
0 0 25 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 25 3 1 #" "
0 0 19 3 7 #"\"white\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 6 #"circle"
0 0 25 3 1 #" "
0 0 22 3 2 #"20"
0 0 25 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 25 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 6 #"circle"
0 0 25 3 1 #" "
0 0 22 3 2 #"25"
0 0 25 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 25 3 1 #" "
0 0 19 3 13 #"\"transparent\""
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 11 #"char->image"
0 0 25 3 1 #" "
0 0 19 3 3 #"\"a\""
0 0 25 3 3 #") )"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 11 #"char->image"
0 0 25 3 1 #" "
0 0 19 3 3 #"\"W\""
0 0 25 3 3 #") )"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 12 #"; Exercise 3"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 10 #"; -> Image"
0 0 25 29 1 #"\n"
0 0 17 3 19 #"; Display end nodes"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 9 #"end-image"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 7 #"overlay"
0 0 25 3 2 #" ("
0 0 14 3 4 #"text"
0 0 25 3 1 #" "
0 0 19 3 4 #"\"\303\230\""
0 0 25 3 1 #" "
0 0 22 3 2 #"20"
0 0 25 3 1 #" "
0 0 19 3 7 #"\"black\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 6 #"circle"
0 0 25 3 1 #" "
0 0 22 3 2 #"18"
0 0 25 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 25 3 1 #" "
0 0 19 3 7 #"\"white\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 6 #"circle"
0 0 25 3 1 #" "
0 0 22 3 2 #"20"
0 0 25 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 25 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 6 #"circle"
0 0 25 3 1 #" "
0 0 22 3 2 #"25"
0 0 25 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 25 3 1 #" "
0 0 19 3 13 #"\"transparent\""
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 1 #" "
0 0 14 3 9 #"end-image"
0 0 25 3 2 #" )"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 12 #"; Exercise 4"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 13 #"; PT -> Image"
0 0 25 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 17 #"process-pt->image"
0 0 25 3 1 #" "
0 0 14 3 2 #"pt"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 4 #"end?"
0 0 25 3 1 #" "
0 0 14 3 2 #"pt"
0 0 25 3 2 #") "
0 0 14 3 3 #"..."
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 25 3 2 #" ("
0 0 14 3 9 #"node-char"
0 0 25 3 1 #" "
0 0 14 3 2 #"pt"
0 0 25 3 3 #")) "
0 0 14 3 3 #"..."
0 0 25 3 2 #" ("
0 0 14 3 20 #"process-lopt->images"
0 0 25 3 2 #" ("
0 0 14 3 10 #"node-nodes"
0 0 25 3 1 #" "
0 0 14 3 2 #"pt"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 25 3 1 #" "
0 0 14 3 3 #"..."
0 0 25 3 2 #" ("
0 0 14 3 9 #"node-char"
0 0 25 3 1 #" "
0 0 14 3 2 #"pt"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"          "
0 0 14 3 3 #"..."
0 0 25 3 2 #" ("
0 0 14 3 20 #"process-lopt->images"
0 0 25 3 2 #" ("
0 0 14 3 10 #"node-nodes"
0 0 25 3 1 #" "
0 0 14 3 2 #"pt"
0 0 25 3 3 #")) "
0 0 14 3 3 #"..."
0 0 25 3 3 #"]))"
0 0 25 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 25 29 1 #"\n"
0 0 17 3 31 #"; [ListOf PT] -> [ListOf Image]"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 20 #"process-lopt->images"
0 0 25 3 1 #" "
0 0 14 3 2 #"lc"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 5 #"foldr"
0 0 25 3 1 #" "
0 0 14 3 18 #"process-pt->images"
0 0 25 3 1 #" "
0 0 14 3 5 #"empty"
0 0 25 3 1 #" "
0 0 14 3 2 #"lc"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 12 #"; Exercise 5"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 26 #"; [ListOf Image] -> Number"
0 0 25 29 1 #"\n"
0 0 17 3 37 #"; Count the total length of the width"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 10 #"loim-width"
0 0 25 3 1 #" "
0 0 14 3 2 #"li"
0 0 25 3 3 #") ("
0 0 14 3 5 #"foldr"
0 0 25 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 25 3 2 #" ("
0 0 14 3 1 #"c"
0 0 25 3 1 #" "
0 0 14 3 1 #"r"
0 0 25 3 3 #") ("
0 0 14 3 1 #"+"
0 0 25 3 2 #" ("
0 0 14 3 11 #"image-width"
0 0 25 3 1 #" "
0 0 14 3 1 #"c"
0 0 25 3 2 #") "
0 0 14 3 1 #"r"
0 0 25 3 3 #")) "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 14 3 2 #"li"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 10 #"loim-width"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 14 3 9 #"end-image"
0 0 25 3 1 #" "
0 0 14 3 9 #"end-image"
0 0 25 3 1 #" "
0 0 14 3 9 #"end-image"
0 0 25 3 3 #")) "
0 0 22 3 3 #"150"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 17 3 26 #"; [ListOf Image] -> Number"
0 0 25 29 1 #"\n"
0 0 17 3 38 #"; Count the total length of the height"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 11 #"loim-height"
0 0 25 3 1 #" "
0 0 14 3 2 #"li"
0 0 25 3 3 #") ("
0 0 14 3 5 #"foldr"
0 0 25 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 25 3 2 #" ("
0 0 14 3 1 #"c"
0 0 25 3 1 #" "
0 0 14 3 1 #"r"
0 0 25 3 3 #") ("
0 0 14 3 3 #"max"
0 0 25 3 2 #" ("
0 0 14 3 12 #"image-height"
0 0 25 3 1 #" "
0 0 14 3 1 #"c"
0 0 25 3 2 #") "
0 0 14 3 1 #"r"
0 0 25 3 3 #")) "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 14 3 2 #"li"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 11 #"loim-height"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 14 3 9 #"end-image"
0 0 25 3 1 #" "
0 0 14 3 9 #"end-image"
0 0 25 3 1 #" "
0 0 14 3 9 #"end-image"
0 0 25 3 3 #")) "
0 0 22 3 2 #"50"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 12 #"; Exercise 6"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 42 #"; Number [ListOf Image] -> [ListOf Number]"
0 0 25 29 1 #"\n"
0 0 17 3 37 #"; Find the center point of each image"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 12 #"loim-centers"
0 0 25 3 1 #" "
0 0 14 3 6 #"offset"
0 0 25 3 1 #" "
0 0 14 3 3 #"lst"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 25 3 1 #" "
0 0 14 3 3 #"lst"
0 0 25 3 2 #") "
0 0 14 3 5 #"empty"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 1 #"+"
0 0 25 3 1 #" "
0 0 14 3 6 #"offset"
0 0 25 3 2 #" ("
0 0 14 3 1 #"/"
0 0 25 3 2 #" ("
0 0 14 3 11 #"image-width"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 3 #"lst"
0 0 25 3 3 #")) "
0 0 22 3 1 #"2"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 17 #"                ("
0 0 14 3 12 #"loim-centers"
0 0 25 3 2 #" ("
0 0 14 3 1 #"+"
0 0 25 3 1 #" "
0 0 14 3 6 #"offset"
0 0 25 3 2 #" ("
0 0 14 3 11 #"image-width"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 3 #"lst"
0 0 25 3 5 #"))) ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 3 #"lst"
0 0 25 3 6 #")))]))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 12 #"loim-centers"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 14 3 9 #"end-image"
0 0 25 3 1 #" "
0 0 14 3 9 #"end-image"
0 0 25 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 2 #"25"
0 0 25 3 1 #" "
0 0 22 3 2 #"75"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 12 #"; Exercise 7"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 25 #"; [ListOf Image] -> Image"
0 0 25 29 1 #"\n"
0 0 17 3 39 #"; Create the background image of the PT"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 10 #"background"
0 0 25 3 1 #" "
0 0 14 3 4 #"loim"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 25 3 1 #" "
0 0 14 3 4 #"loim"
0 0 25 3 3 #") ("
0 0 14 3 9 #"rectangle"
0 0 25 3 1 #" "
0 0 22 3 2 #"50"
0 0 25 3 1 #" "
0 0 22 3 2 #"50"
0 0 25 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 25 3 1 #" "
0 0 19 3 13 #"\"transparent\""
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 9 #"rectangle"
0 0 25 3 2 #" ("
0 0 14 3 10 #"loim-width"
0 0 25 3 1 #" "
0 0 14 3 4 #"loim"
0 0 25 3 3 #") ("
0 0 14 3 1 #"+"
0 0 25 3 1 #" "
0 0 22 3 3 #"100"
0 0 25 3 2 #" ("
0 0 14 3 11 #"loim-height"
0 0 25 3 1 #" "
0 0 14 3 4 #"loim"
0 0 25 3 3 #")) "
0 0 19 3 7 #"\"solid\""
0 0 25 3 1 #" "
0 0 19 3 13 #"\"transparent\""
0 0 25 3 4 #")]))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 10 #"background"
0 0 25 3 1 #" "
0 0 14 3 5 #"empty"
0 0 25 3 3 #") ("
0 0 14 3 6 #"square"
0 0 25 3 1 #" "
0 0 22 3 2 #"50"
0 0 25 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 25 3 1 #" "
0 0 19 3 13 #"\"transparent\""
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 10 #"background"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 14 3 9 #"end-image"
0 0 25 3 1 #" "
0 0 14 3 9 #"end-image"
0 0 25 3 4 #")) ("
0 0 14 3 9 #"rectangle"
0 0 25 3 1 #" "
0 0 22 3 3 #"100"
0 0 25 3 1 #" "
0 0 22 3 3 #"150"
0 0 25 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 25 3 1 #" "
0 0 19 3 13 #"\"transparent\""
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 12 #"; Exercise 8"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 32 #"; Image [ListOf Number] -> Image"
0 0 25 29 1 #"\n"
0 0 17 3 34 #"; Draw each line between two nodes"
0 0 25 29 1 #"\n"
0 0 17 3 81
(
 #"; Because the radius of the image is 25, if we want to draw the imag"
 #"e on the top,"
) 0 0 25 29 1 #"\n"
0 0 17 3 42 #"; we need to put the upper point at y = 25"
0 0 25 29 1 #"\n"
0 0 17 3 63
#"; And because of the vetical distance between two nodes is 100,"
0 0 25 29 1 #"\n"
0 0 17 3 72
(
 #"; so the difference of y value between root node and child nodes is "
 #"100."
) 0 0 25 29 1 #"\n"
0 0 17 3 83
(
 #"; Because we need to put the upper node on the central top of the gi"
 #"ven background,"
) 0 0 25 29 1 #"\n"
0 0 17 3 52 #"; the value of x need to be half of the total width."
0 0 25 29 1 #"\n"
0 0 17 3 56 #"; The given list is the center point of a list of image,"
0 0 25 29 1 #"\n"
0 0 17 3 70
(
 #"; so each child nodes has the same value of the given list of number"
 #"s."
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 10 #"draw-lines"
0 0 25 3 1 #" "
0 0 14 3 2 #"bk"
0 0 25 3 1 #" "
0 0 14 3 3 #"loc"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 5 #"foldr"
0 0 25 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 25 3 2 #" ("
0 0 14 3 1 #"c"
0 0 25 3 1 #" "
0 0 14 3 1 #"r"
0 0 25 3 3 #") ("
0 0 14 3 8 #"add-line"
0 0 25 3 1 #" "
0 0 14 3 1 #"r"
0 0 25 3 2 #" ("
0 0 14 3 1 #"/"
0 0 25 3 2 #" ("
0 0 14 3 11 #"image-width"
0 0 25 3 1 #" "
0 0 14 3 2 #"bk"
0 0 25 3 2 #") "
0 0 22 3 1 #"2"
0 0 25 3 2 #") "
0 0 22 3 2 #"25"
0 0 25 3 1 #" "
0 0 14 3 1 #"c"
0 0 25 3 1 #" "
0 0 22 3 3 #"125"
0 0 25 3 1 #" "
0 0 19 3 7 #"\"black\""
0 0 25 3 3 #")) "
0 0 14 3 2 #"bk"
0 0 25 3 1 #" "
0 0 14 3 3 #"loc"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 10 #"draw-lines"
0 0 25 3 2 #" ("
0 0 14 3 10 #"background"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 14 3 9 #"end-image"
0 0 25 3 1 #" "
0 0 14 3 9 #"end-image"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 27 #"                          ("
0 0 14 3 12 #"loim-centers"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 14 3 9 #"end-image"
0 0 25 3 1 #" "
0 0 14 3 9 #"end-image"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"              "
0 6           4 4 475
(
 #"(#(struct:translate 0 0 #(struct:overlay #(struct:line-segment #(str"
 #"uct:point 50 25) #(struct:point 25 125) \"black\") #(struct:translat"
 #"e 0 0 #(struct:overlay #(struct:line-segment #(struct:point 50 25) #"
 #"(struct:point 75 125) \"black\") #(struct:translate 0 0 #(struct:pol"
 #"ygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 1"
 #"00 0 0 0) #(struct:pulled-point 0 0 100 150 0 0) #(struct:pulled-poi"
 #"nt 0 0 0 150 0 0)) 255 \"transparent\")))))) #(struct:bb 100 150 150"
 #") #f)"
) 0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 12 #"; Exercise 9"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 29 #"; Image ListOfImages -> Image"
0 0 25 29 1 #"\n"
0 0 17 3 44 #"; Draw child nodes at the below of the image"
0 0 25 29 1 #"\n"
0 0 17 3 66
#"; For each child nodes, they top need to be put on a stright line,"
0 0 25 29 1 #"\n"
0 0 17 3 64
#"; so we need to use beside/align \"top\" to align they on the top."
0 0 25 29 1 #"\n"
0 0 17 3 73
(
 #"; And we need to put all of these images which have already been com"
 #"bined"
) 0 0 25 29 1 #"\n"
0 0 17 3 82
(
 #"; into one at 100 from the top. Because we do not know exactly size "
 #"of this image,"
) 0 0 25 29 1 #"\n"
0 0 17 3 60
#"; we can put the left top point at (0, 100) to keep it work."
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 9 #"draw-loim"
0 0 25 3 1 #" "
0 0 14 3 2 #"bk"
0 0 25 3 1 #" "
0 0 14 3 4 #"loim"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 17 #"place-image/align"
0 0 25 3 2 #" ("
0 0 14 3 5 #"foldr"
0 0 25 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 25 3 2 #" ("
0 0 14 3 1 #"c"
0 0 25 3 1 #" "
0 0 14 3 1 #"r"
0 0 25 3 3 #") ("
0 0 14 3 12 #"beside/align"
0 0 25 3 1 #" "
0 0 19 3 5 #"\"top\""
0 0 25 3 1 #" "
0 0 14 3 1 #"c"
0 0 25 3 1 #" "
0 0 14 3 1 #"r"
0 0 25 3 4 #")) ("
0 0 14 3 9 #"rectangle"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 25 3 1 #" "
0 0 19 3 13 #"\"transparent\""
0 0 25 3 2 #") "
0 0 14 3 4 #"loim"
0 0 25 3 1 #")"
0 1 25 65 1 #"\t"
0 0 25 3 1 #" "
0 1 25 65 1 #"\t"
0 0 25 3 1 #" "
0 1 25 65 1 #"\t"
0 0 25 3 1 #" "
0 1 25 65 1 #"\t"
0 0 25 3 1 #" "
0 0 25 29 1 #"\n"
0 0 25 3 21 #"                     "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 3 #"100"
0 1 25 65 1 #"\t"
0 0 25 3 1 #" "
0 1 25 65 1 #"\t"
0 0 25 3 1 #" "
0 1 25 65 1 #"\t"
0 0 25 3 1 #" "
0 1 25 65 1 #"\t"
0 0 25 3 1 #" "
0 0 25 29 1 #"\n"
0 0 25 3 21 #"                     "
0 0 19 3 6 #"\"left\""
0 0 25 3 1 #" "
0 0 19 3 5 #"\"top\""
0 0 25 3 1 #" "
0 0 14 3 2 #"bk"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 9 #"draw-loim"
0 0 25 3 2 #" ("
0 0 14 3 10 #"background"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 14 3 9 #"end-image"
0 0 25 3 1 #" "
0 0 14 3 9 #"end-image"
0 0 25 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 14 3 9 #"end-image"
0 0 25 3 1 #" "
0 0 14 3 9 #"end-image"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 15 #"              )"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 13 #"; Exercise 10"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 19 #"; Image PT -> Image"
0 0 25 29 1 #"\n"
0 0 17 3 42 #"; Draw the PT node on the given background"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 9 #"draw-node"
0 0 25 3 1 #" "
0 0 14 3 2 #"bk"
0 0 25 3 1 #" "
0 0 14 3 2 #"pt"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 11 #"place-image"
0 0 25 3 2 #" ("
0 0 14 3 11 #"char->image"
0 0 25 3 2 #" ("
0 0 14 3 6 #"string"
0 0 25 3 2 #" ("
0 0 14 3 9 #"node-char"
0 0 25 3 1 #" "
0 0 14 3 2 #"pt"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 1 #"/"
0 0 25 3 2 #" ("
0 0 14 3 11 #"image-width"
0 0 25 3 1 #" "
0 0 14 3 2 #"bk"
0 0 25 3 2 #") "
0 0 22 3 1 #"2"
0 0 25 3 2 #") "
0 0 22 3 2 #"25"
0 0 25 3 1 #" "
0 0 14 3 2 #"bk"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 9 #"draw-node"
0 0 25 3 2 #" ("
0 0 14 3 10 #"background"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 14 3 9 #"end-image"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 26 #"                         ("
0 0 14 3 9 #"make-node"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\o"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 8 #"make-end"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 15 #"              )"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 13 #"; Exercise 11"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 13 #"; PT -> Image"
0 0 25 29 1 #"\n"
0 0 17 3 40 #"; Draw the whole picture of the given pt"
0 0 25 29 1 #"\n"
0 0 17 3 57 #"; Draw-node needs to draw the father node on a background"
0 0 25 29 1 #"\n"
0 0 17 3 44 #"; which already has all other image on that."
0 0 25 29 1 #"\n"
0 0 17 3 55 #"; In order to creat this background used in draw-nodes,"
0 0 25 29 1 #"\n"
0 0 17 3 70
(
 #"; we need to draw all the child nodes on the image wich contain line"
 #"s."
) 0 0 25 29 1 #"\n"
0 0 17 3 65
#"; To draw lines, we need to use draw-lines function to draw these"
0 0 25 29 1 #"\n"
0 0 17 3 58
#"; on a suitable background. So we need background function"
0 0 25 29 1 #"\n"
0 0 17 3 39 #"; to get a big enough background image."
0 0 25 29 1 #"\n"
0 0 17 3 47 #"; And draw-lines needs to be the base function,"
0 0 25 29 1 #"\n"
0 0 17 3 84
(
 #"; because all ther images including father node and child nodes are "
 #"above the lines."
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 9 #"pt->image"
0 0 25 3 1 #" "
0 0 14 3 2 #"pt"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 4 #"end?"
0 0 25 3 1 #" "
0 0 14 3 2 #"pt"
0 0 25 3 3 #") ("
0 0 14 3 11 #"place-image"
0 0 25 3 1 #" "
0 0 14 3 9 #"end-image"
0 0 25 3 1 #" "
0 0 22 3 2 #"25"
0 0 25 3 1 #" "
0 0 22 3 2 #"25"
0 0 25 3 2 #" ("
0 0 14 3 10 #"background"
0 0 25 3 1 #" "
0 0 14 3 5 #"empty"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 25 3 2 #" ("
0 0 14 3 9 #"node-char"
0 0 25 3 1 #" "
0 0 14 3 2 #"pt"
0 0 25 3 4 #")) ("
0 0 14 3 5 #"foldr"
0 0 25 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 25 3 2 #" ("
0 0 14 3 1 #"c"
0 0 25 3 1 #" "
0 0 14 3 1 #"r"
0 0 25 3 3 #") ("
0 0 14 3 12 #"beside/align"
0 0 25 3 1 #" "
0 0 19 3 5 #"\"top\""
0 0 25 3 2 #" ("
0 0 14 3 9 #"pt->image"
0 0 25 3 1 #" "
0 0 14 3 1 #"c"
0 0 25 3 2 #") "
0 0 14 3 1 #"r"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 37 #"                                    ("
0 0 14 3 9 #"rectangle"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 25 3 1 #" "
0 0 19 3 13 #"\"transparent\""
0 0 25 3 3 #") ("
0 0 14 3 10 #"node-nodes"
0 0 25 3 1 #" "
0 0 14 3 2 #"pt"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 9 #"draw-node"
0 0 25 3 2 #" ("
0 0 14 3 9 #"draw-loim"
0 0 25 3 2 #" ("
0 0 14 3 10 #"draw-lines"
0 0 25 3 2 #" ("
0 0 14 3 10 #"background"
0 0 25 3 2 #" ("
0 0 14 3 3 #"map"
0 0 25 3 1 #" "
0 0 14 3 9 #"pt->image"
0 0 25 3 2 #" ("
0 0 14 3 10 #"node-nodes"
0 0 25 3 1 #" "
0 0 14 3 2 #"pt"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 45 #"                                            ("
0 0 14 3 12 #"loim-centers"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #" ("
0 0 14 3 3 #"map"
0 0 25 3 1 #" "
0 0 14 3 9 #"pt->image"
0 0 25 3 2 #" ("
0 0 14 3 10 #"node-nodes"
0 0 25 3 1 #" "
0 0 14 3 2 #"pt"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 33 #"                                ("
0 0 14 3 3 #"map"
0 0 25 3 1 #" "
0 0 14 3 9 #"pt->image"
0 0 25 3 2 #" ("
0 0 14 3 10 #"node-nodes"
0 0 25 3 1 #" "
0 0 14 3 2 #"pt"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 21 #"                     "
0 0 14 3 2 #"pt"
0 0 25 3 4 #")]))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 9 #"pt->image"
0 0 25 3 1 #" "
0 0 14 3 3 #"pt0"
0 0 25 3 3 #") )"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 13 #"; Exercise 12"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 17 #"; PT String -> PT"
0 0 25 29 1 #"\n"
0 0 17 3 35 #"; Add a new word in to the given PT"
0 0 25 29 1 #"\n"
0 0 17 3 69
(
 #"; When we get a word, we need to search if it is match with some wor"
 #"d"
) 0 0 25 29 1 #"\n"
0 0 17 3 70
(
 #"; which is already in the PT. If true, return the original PT. If no"
 #"t,"
) 0 0 25 29 1 #"\n"
0 0 17 3 36 #"; we need to push it in to the tree."
0 0 25 29 1 #"\n"
0 0 17 3 77
(
 #"; First, we need to check if the first letter of the given string is"
 #" equal to"
) 0 0 25 29 1 #"\n"
0 0 17 3 74
(
 #"; the father node of the given PT. If matched, we need to continual "
 #"search"
) 0 0 25 29 1 #"\n"
0 0 17 3 72
(
 #"; the rest part of the word in each value of the child nodes of this"
 #" PT."
) 0 0 25 29 1 #"\n"
0 0 17 3 63
#"; If not matched, we need to creat a new node of the given word"
0 0 25 29 1 #"\n"
0 0 17 3 37 #"; on the same laveal of the given PT."
0 0 25 29 1 #"\n"
0 0 17 3 60
#"; The puepose of the helper function to to creat a recursive"
0 0 25 29 1 #"\n"
0 0 17 3 42 #"; to search same letter in the list of PT."
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 8 #"add-word"
0 0 25 3 1 #" "
0 0 14 3 2 #"pt"
0 0 25 3 1 #" "
0 0 14 3 4 #"word"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 25 3 2 #" ["
0 0 17 3 47 #"; [ListOf PT] [ListOf Character] -> [ListOf PT]"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 10 #"add-a-word"
0 0 25 3 1 #" "
0 0 14 3 2 #"lp"
0 0 25 3 1 #" "
0 0 14 3 4 #"word"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"            ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"              [("
0 0 14 3 6 #"empty?"
0 0 25 3 1 #" "
0 0 14 3 4 #"word"
0 0 25 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 8 #"make-end"
0 0 25 3 2 #") "
0 0 14 3 2 #"lp"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"              [("
0 0 14 3 6 #"empty?"
0 0 25 3 1 #" "
0 0 14 3 2 #"lp"
0 0 25 3 3 #") ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 5 #"foldr"
0 0 25 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 25 3 2 #" ("
0 0 14 3 1 #"c"
0 0 25 3 1 #" "
0 0 14 3 1 #"r"
0 0 25 3 3 #") ("
0 0 14 3 9 #"make-node"
0 0 25 3 1 #" "
0 0 14 3 1 #"c"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 14 3 1 #"r"
0 0 25 3 5 #"))) ("
0 0 14 3 8 #"make-end"
0 0 25 3 2 #") "
0 0 14 3 4 #"word"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"              [("
0 0 14 3 4 #"end?"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 2 #"lp"
0 0 25 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 2 #"lp"
0 0 25 3 3 #") ("
0 0 14 3 10 #"add-a-word"
0 0 25 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 2 #"lp"
0 0 25 3 2 #") "
0 0 14 3 4 #"word"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 15 #"              ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 6 #"char=?"
0 0 25 3 2 #" ("
0 0 14 3 9 #"node-char"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 2 #"lp"
0 0 25 3 4 #")) ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 4 #"word"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 25 #"                        ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 25 3 2 #" ("
0 0 14 3 9 #"node-char"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 2 #"lp"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 42 #"                                         ("
0 0 14 3 10 #"add-a-word"
0 0 25 3 2 #" ("
0 0 14 3 10 #"node-nodes"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 2 #"lp"
0 0 25 3 4 #")) ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 4 #"word"
0 0 25 3 5 #"))) ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 2 #"lp"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 25 #"                        ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 2 #"lp"
0 0 25 3 3 #") ("
0 0 14 3 10 #"add-a-word"
0 0 25 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 2 #"lp"
0 0 25 3 2 #") "
0 0 14 3 4 #"word"
0 0 25 3 7 #")))]))]"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 6 #"match?"
0 0 25 3 2 #" ("
0 0 14 3 12 #"string->list"
0 0 25 3 1 #" "
0 0 14 3 4 #"word"
0 0 25 3 2 #") "
0 0 14 3 2 #"pt"
0 0 25 3 2 #") "
0 0 14 3 2 #"pt"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 14 3 9 #"make-node"
0 0 25 3 1 #" "
0 0 14 3 5 #"empty"
0 0 25 3 2 #" ("
0 0 14 3 10 #"add-a-word"
0 0 25 3 2 #" ("
0 0 14 3 10 #"node-nodes"
0 0 25 3 1 #" "
0 0 14 3 2 #"pt"
0 0 25 3 3 #") ("
0 0 14 3 12 #"string->list"
0 0 25 3 1 #" "
0 0 14 3 4 #"word"
0 0 25 3 6 #"))))))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 8 #"add-word"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 9 #"make-node"
0 0 25 3 1 #" "
0 0 14 3 5 #"empty"
0 0 25 29 1 #"\n"
0 0 25 3 27 #"                          ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\o"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\f"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\f"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 8 #"make-end"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 3 54 #"                                                     ("
0 0 14 3 8 #"make-end"
0 0 25 3 6 #"))))) "
0 0 19 3 5 #"\"oft\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 15 #"              ("
0 0 14 3 9 #"make-node"
0 0 25 3 1 #" "
0 0 14 3 5 #"empty"
0 0 25 29 1 #"\n"
0 0 25 3 26 #"                         ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\o"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\f"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\f"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 8 #"make-end"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 74
(
 #"                                                                    "
 #"     ("
) 0 0 14 3 9 #"make-node"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\t"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 8 #"make-end"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 3 53 #"                                                    ("
0 0 14 3 8 #"make-end"
0 0 25 3 6 #"))))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 13 #"; Exercise 13"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 9 #"pt->image"
0 0 25 3 2 #" ("
0 0 14 3 8 #"add-word"
0 0 25 3 1 #" "
0 0 14 3 3 #"pt0"
0 0 25 3 1 #" "
0 0 19 3 4 #"\"hi\""
0 0 25 3 4 #")) )"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 40 #"; A PTWord is : (make-pt-word PT String)"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 25 3 1 #" "
0 0 14 3 7 #"pt-word"
0 0 25 3 2 #" ("
0 0 14 3 2 #"pt"
0 0 25 3 1 #" "
0 0 14 3 4 #"word"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 17 #"; PTWord -> Image"
0 0 25 29 1 #"\n"
0 0 17 3 42 #"; Draw both input word and PT in one image"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 12 #"draw-pt-word"
0 0 25 3 1 #" "
0 0 14 3 2 #"pw"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 25 3 2 #" ["
0 0 17 3 14 #"; Image String"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 7 #"combine"
0 0 25 3 1 #" "
0 0 14 3 2 #"pt"
0 0 25 3 1 #" "
0 0 14 3 4 #"word"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"            ("
0 0 14 3 17 #"place-image/align"
0 0 25 3 2 #" ("
0 0 14 3 4 #"text"
0 0 25 3 1 #" "
0 0 14 3 4 #"word"
0 0 25 3 1 #" "
0 0 22 3 2 #"20"
0 0 25 3 1 #" "
0 0 19 3 7 #"\"black\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 31 #"                               "
0 0 22 3 2 #"10"
0 0 25 3 1 #" "
0 0 22 3 2 #"10"
0 0 25 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 25 3 1 #" "
0 0 19 3 5 #"\"top\""
0 0 25 29 1 #"\n"
0 0 25 3 32 #"                               ("
0 0 14 3 11 #"place-image"
0 0 25 3 1 #" "
0 0 14 3 2 #"pt"
0 0 25 3 1 #" "
0 0 22 3 3 #"500"
0 0 25 3 1 #" "
0 0 22 3 3 #"520"
0 0 25 29 1 #"\n"
0 0 25 3 45 #"                                            ("
0 0 14 3 11 #"empty-scene"
0 0 25 3 1 #" "
0 0 22 3 4 #"1000"
0 0 25 3 1 #" "
0 0 22 3 4 #"1020"
0 0 25 3 5 #"))))]"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 7 #"combine"
0 0 25 3 2 #" ("
0 0 14 3 9 #"pt->image"
0 0 25 3 2 #" ("
0 0 14 3 10 #"pt-word-pt"
0 0 25 3 1 #" "
0 0 14 3 2 #"pw"
0 0 25 3 4 #")) ("
0 0 14 3 12 #"pt-word-word"
0 0 25 3 1 #" "
0 0 14 3 2 #"pw"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 25 #"; PTWord String -> PTWord"
0 0 25 29 1 #"\n"
0 0 17 3 37 #"; Make the given letter in the PTWord"
0 0 25 29 1 #"\n"
0 0 17 3 70
(
 #"; We will type a word. If we type any letter no matter capital or no"
 #"t,"
) 0 0 25 29 1 #"\n"
0 0 17 3 89
(
 #"; we can push it in to the word list wich will apeal on the left top"
 #" conner of the image."
) 0 0 25 29 1 #"\n"
0 0 17 3 74
(
 #"; Then if we type return, we can add the word list to the PT, and dr"
 #"aw it."
) 0 0 25 29 1 #"\n"
0 0 17 3 71
(
 #"; If we type backspeace, we can delet the last letter in the word li"
 #"st."
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 8 #"get-word"
0 0 25 3 1 #" "
0 0 14 3 2 #"pw"
0 0 25 3 1 #" "
0 0 14 3 2 #"ke"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 8 #"string=?"
0 0 25 3 1 #" "
0 0 19 3 4 #"\"\\r\""
0 0 25 3 1 #" "
0 0 14 3 2 #"ke"
0 0 25 3 3 #") ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"zero?"
0 0 25 3 2 #" ("
0 0 14 3 13 #"string-length"
0 0 25 3 2 #" ("
0 0 14 3 12 #"pt-word-word"
0 0 25 3 1 #" "
0 0 14 3 2 #"pw"
0 0 25 3 4 #"))) "
0 0 14 3 2 #"pw"
0 0 25 29 1 #"\n"
0 0 25 3 29 #"                            ("
0 0 14 3 12 #"make-pt-word"
0 0 25 3 2 #" ("
0 0 14 3 8 #"add-word"
0 0 25 3 2 #" ("
0 0 14 3 10 #"pt-word-pt"
0 0 25 3 1 #" "
0 0 14 3 2 #"pw"
0 0 25 3 3 #") ("
0 0 14 3 12 #"pt-word-word"
0 0 25 3 1 #" "
0 0 14 3 2 #"pw"
0 0 25 3 3 #")) "
0 0 19 3 2 #"\"\""
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 8 #"string=?"
0 0 25 3 1 #" "
0 0 19 3 4 #"\"\\b\""
0 0 25 3 1 #" "
0 0 14 3 2 #"ke"
0 0 25 3 3 #") ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"zero?"
0 0 25 3 2 #" ("
0 0 14 3 13 #"string-length"
0 0 25 3 2 #" ("
0 0 14 3 12 #"pt-word-word"
0 0 25 3 1 #" "
0 0 14 3 2 #"pw"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 28 #"                            "
0 0 14 3 2 #"pw"
0 0 25 29 1 #"\n"
0 0 25 3 29 #"                            ("
0 0 14 3 12 #"make-pt-word"
0 0 25 3 2 #" ("
0 0 14 3 10 #"pt-word-pt"
0 0 25 3 1 #" "
0 0 14 3 2 #"pw"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 43 #"                                          ("
0 0 14 3 9 #"substring"
0 0 25 3 2 #" ("
0 0 14 3 12 #"pt-word-word"
0 0 25 3 1 #" "
0 0 14 3 2 #"pw"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 53 #"                                                     "
0 0 22 3 1 #"0"
0 0 25 3 2 #" ("
0 0 14 3 4 #"sub1"
0 0 25 3 2 #" ("
0 0 14 3 13 #"string-length"
0 0 25 3 2 #" ("
0 0 14 3 12 #"pt-word-word"
0 0 25 3 1 #" "
0 0 14 3 2 #"pw"
0 0 25 3 7 #"))))))]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 3 #"and"
0 0 25 3 2 #" ("
0 0 14 3 1 #"="
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 2 #" ("
0 0 14 3 13 #"string-length"
0 0 25 3 1 #" "
0 0 14 3 2 #"ke"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 8 #"string=?"
0 0 25 3 1 #" "
0 0 19 3 4 #"\"\\t\""
0 0 25 3 1 #" "
0 0 14 3 2 #"ke"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 14 3 2 #"or"
0 0 25 3 2 #" ("
0 0 14 3 3 #"and"
0 0 25 3 2 #" ("
0 0 14 3 7 #"char<=?"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\a"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 2 #" ("
0 0 14 3 12 #"string->list"
0 0 25 3 1 #" "
0 0 14 3 2 #"ke"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 20 #"                   ("
0 0 14 3 7 #"char>=?"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\z"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 2 #" ("
0 0 14 3 12 #"string->list"
0 0 25 3 1 #" "
0 0 14 3 2 #"ke"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 15 #"              ("
0 0 14 3 3 #"and"
0 0 25 3 2 #" ("
0 0 14 3 7 #"char<=?"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\A"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 2 #" ("
0 0 14 3 12 #"string->list"
0 0 25 3 1 #" "
0 0 14 3 2 #"ke"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 20 #"                   ("
0 0 14 3 7 #"char>=?"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\Z"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 2 #" ("
0 0 14 3 12 #"string->list"
0 0 25 3 1 #" "
0 0 14 3 2 #"ke"
0 0 25 3 8 #")))))) ("
0 0 14 3 12 #"make-pt-word"
0 0 25 3 2 #" ("
0 0 14 3 10 #"pt-word-pt"
0 0 25 3 1 #" "
0 0 14 3 2 #"pw"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 77
(
 #"                                                                    "
 #"        ("
) 0 0 14 3 13 #"string-append"
0 0 25 3 2 #" ("
0 0 14 3 12 #"pt-word-word"
0 0 25 3 1 #" "
0 0 14 3 2 #"pw"
0 0 25 3 2 #") "
0 0 14 3 2 #"ke"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 25 3 1 #" "
0 0 14 3 2 #"pw"
0 0 25 3 3 #"]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 8 #"big-bang"
0 0 25 3 2 #" ("
0 0 14 3 12 #"make-pt-word"
0 0 25 3 1 #" "
0 0 14 3 3 #"pt0"
0 0 25 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ["
0 0 14 3 7 #"to-draw"
0 0 25 3 1 #" "
0 0 14 3 12 #"draw-pt-word"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ["
0 0 14 3 6 #"on-key"
0 0 25 3 1 #" "
0 0 14 3 8 #"get-word"
0 0 25 3 2 #"])"
0           0
