#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.6 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 32 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 91 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 6 #"Menlo\0"
0 15 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 192 46 214 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 57 89 216 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
38 #"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 0 1
#"\0"
0 75 6 #"Menlo\0"
0.0 15 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 38 38 128 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 194 116 31 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 41 128 38 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 132 60 36 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 81 112 203 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 178 34 34 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 68 0 203 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 116 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 139 142 28 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0 0
0 0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 255 255
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 192 46 214 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 57 89 216 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 255 255
0 0 0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
0.0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0.0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 25 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 45 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 47 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 65 105 225 0
0 0 -1 -1 14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
0 -1 22 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 19 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1           0 1957 0 17 3 85
(
 #";; The first three lines of this file were inserted by DrRacket. The"
 #"y record metadata"
) 0 0 25 29 1 #"\n"
0 0 17 3 85
(
 #";; about the language level of this file in a form that our tools ca"
 #"n easily process."
) 0 0 25 29 1 #"\n"
0 0 27 3 7 #"#reader"
0 0 25 3 1 #"("
0 0 14 3 3 #"lib"
0 0 25 3 1 #" "
0 0 19 3 36 #"\"htdp-intermediate-lambda-reader.ss\""
0 0 25 3 1 #" "
0 0 19 3 6 #"\"lang\""
0 0 25 3 3 #")(("
0 0 14 3 7 #"modname"
0 0 25 3 1 #" "
0 0 14 3 25 #"|Assignment-10-Siyi Xian|"
0 0 25 3 3 #") ("
0 0 14 3 19 #"read-case-sensitive"
0 0 25 3 1 #" "
0 0 22 3 2 #"#t"
0 0 25 3 3 #") ("
0 0 14 3 10 #"teachpacks"
0 0 25 3 6 #" ()) ("
0 0 14 3 13 #"htdp-settings"
0 0 25 3 3 #" #("
0 0 22 3 2 #"#t"
0 0 25 3 1 #" "
0 0 14 3 11 #"constructor"
0 0 25 3 1 #" "
0 0 14 3 17 #"repeating-decimal"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 1 #" "
0 0 22 3 2 #"#t"
0 0 25 3 1 #" "
0 0 14 3 4 #"none"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 4 #" () "
0 0 22 3 2 #"#f"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 7 #"require"
0 0 25 3 1 #" "
0 0 14 3 11 #"2htdp/image"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 7 #"require"
0 0 25 3 1 #" "
0 0 14 3 14 #"2htdp/universe"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 24 #"; A PrefixTree (PT) is a"
0 0 25 29 1 #"\n"
0 0 17 3 14 #"; | (make-end)"
0 0 25 29 1 #"\n"
0 0 17 3 8 #"; | Node"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 24 #"; An End is : (make-end)"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 25 3 1 #" "
0 0 14 3 3 #"end"
0 0 25 3 4 #" [])"
0 0 25 29 1 #"\n"
0 0 17 3 58
#"; A Node is : (make-node [Character or Empty] [ListOf PT])"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 25 3 1 #" "
0 0 14 3 4 #"node"
0 0 25 3 2 #" ("
0 0 14 3 4 #"char"
0 0 25 3 1 #" "
0 0 14 3 5 #"nodes"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 3 #"pt1"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\o"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"            ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\n"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 29 1 #"\n"
0 0 25 3 36 #"                                   ("
0 0 14 3 8 #"make-end"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 36 #"                                   ("
0 0 14 3 9 #"make-node"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\e"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 8 #"make-end"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 3 19 #"                  ("
0 0 14 3 9 #"make-node"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\f"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 29 1 #"\n"
0 0 25 3 36 #"                                   ("
0 0 14 3 8 #"make-end"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 36 #"                                   ("
0 0 14 3 9 #"make-node"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\f"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 8 #"make-end"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 36 #"                                   ("
0 0 14 3 9 #"make-node"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\t"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 8 #"make-end"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 3 19 #"                  ("
0 0 14 3 9 #"make-node"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\r"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 8 #"make-end"
0 0 25 3 6 #"))))))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 3 #"pt0"
0 0 25 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 25 3 1 #" "
0 0 14 3 5 #"empty"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 14 3 3 #"pt1"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 12 #"; Exercise 1"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 34 #"; [ListOf Character] PT -> Boolean"
0 0 25 29 1 #"\n"
0 0 17 3 76
(
 #"; Check if the given list of characters (a word) is in the given pre"
 #"fix tree"
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 6 #"match?"
0 0 25 3 1 #" "
0 0 14 3 2 #"lc"
0 0 25 3 1 #" "
0 0 14 3 2 #"pt"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 3 #"and"
0 0 25 3 2 #" ("
0 0 14 3 4 #"end?"
0 0 25 3 1 #" "
0 0 14 3 2 #"pt"
0 0 25 3 3 #") ("
0 0 14 3 6 #"empty?"
0 0 25 3 1 #" "
0 0 14 3 2 #"lc"
0 0 25 3 3 #")) "
0 0 22 3 5 #"#true"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 2 #"or"
0 0 25 3 2 #" ("
0 0 14 3 4 #"end?"
0 0 25 3 1 #" "
0 0 14 3 2 #"pt"
0 0 25 3 3 #") ("
0 0 14 3 6 #"empty?"
0 0 25 3 1 #" "
0 0 14 3 2 #"lc"
0 0 25 3 3 #")) "
0 0 22 3 6 #"#false"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 25 3 2 #" ("
0 0 14 3 9 #"node-char"
0 0 25 3 1 #" "
0 0 14 3 2 #"pt"
0 0 25 3 4 #")) ("
0 0 14 3 5 #"foldr"
0 0 25 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 25 3 2 #" ("
0 0 14 3 1 #"c"
0 0 25 3 1 #" "
0 0 14 3 1 #"r"
0 0 25 3 3 #") ("
0 0 14 3 2 #"or"
0 0 25 3 2 #" ("
0 0 14 3 6 #"match?"
0 0 25 3 1 #" "
0 0 14 3 2 #"lc"
0 0 25 3 1 #" "
0 0 14 3 1 #"c"
0 0 25 3 2 #") "
0 0 14 3 1 #"r"
0 0 25 3 3 #")) "
0 0 22 3 6 #"#false"
0 0 25 3 2 #" ("
0 0 14 3 10 #"node-nodes"
0 0 25 3 1 #" "
0 0 14 3 2 #"pt"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 3 #"and"
0 0 25 3 2 #" ("
0 0 14 3 6 #"char=?"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 2 #"lc"
0 0 25 3 3 #") ("
0 0 14 3 9 #"node-char"
0 0 25 3 1 #" "
0 0 14 3 2 #"pt"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 5 #"foldr"
0 0 25 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 25 3 2 #" ("
0 0 14 3 1 #"c"
0 0 25 3 1 #" "
0 0 14 3 1 #"r"
0 0 25 3 3 #") ("
0 0 14 3 2 #"or"
0 0 25 3 2 #" ("
0 0 14 3 6 #"match?"
0 0 25 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 2 #"lc"
0 0 25 3 2 #") "
0 0 14 3 1 #"c"
0 0 25 3 2 #") "
0 0 14 3 1 #"r"
0 0 25 3 3 #")) "
0 0 22 3 6 #"#false"
0 0 25 3 2 #" ("
0 0 14 3 10 #"node-nodes"
0 0 25 3 1 #" "
0 0 14 3 2 #"pt"
0 0 25 3 6 #")))]))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 6 #"match?"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\o"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\f"
0 0 25 3 2 #") "
0 0 14 3 3 #"pt0"
0 0 25 3 2 #") "
0 0 22 3 5 #"#true"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 6 #"match?"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\u"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\p"
0 0 25 3 2 #") "
0 0 14 3 3 #"pt0"
0 0 25 3 2 #") "
0 0 22 3 6 #"#false"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 6 #"match?"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\o"
0 0 25 3 2 #") "
0 0 14 3 3 #"pt0"
0 0 25 3 2 #") "
0 0 22 3 6 #"#false"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 6 #"match?"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\o"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\f"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\t"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\e"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\n"
0 0 25 3 2 #") "
0 0 14 3 3 #"pt0"
0 0 25 3 2 #") "
0 0 22 3 6 #"#false"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 12 #"; Exercise 2"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 17 #"; String -> Image"
0 0 25 29 1 #"\n"
0 0 17 3 64
#"; Draws a node image for the given character (one length string)"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 11 #"char->image"
0 0 25 3 1 #" "
0 0 14 3 1 #"c"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 7 #"overlay"
0 0 25 3 2 #" ("
0 0 14 3 4 #"text"
0 0 25 3 1 #" "
0 0 14 3 1 #"c"
0 0 25 3 1 #" "
0 0 22 3 2 #"20"
0 0 25 3 1 #" "
0 0 19 3 7 #"\"black\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 6 #"circle"
0 0 25 3 1 #" "
0 0 22 3 2 #"18"
0 0 25 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 25 3 1 #" "
0 0 19 3 7 #"\"white\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 6 #"circle"
0 0 25 3 1 #" "
0 0 22 3 2 #"20"
0 0 25 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 25 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 6 #"circle"
0 0 25 3 1 #" "
0 0 22 3 2 #"25"
0 0 25 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 25 3 1 #" "
0 0 19 3 13 #"\"transparent\""
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 11 #"char->image"
0 0 25 3 1 #" "
0 0 19 3 3 #"\"a\""
0 0 25 3 2 #") "
0 6           4 81 528
(
 #"(#(struct:overlay #(struct:translate 5.0 5.0 #(struct:overlay #(stru"
 #"ct:translate 2.0 2.0 #(struct:overlay #(struct:translate 12.5 8.0 #("
 #"struct:translate 5.5 10.0 #(struct:text \"a\" 0 1 \"black\" 20 #f sw"
 #"iss normal normal #f))) #(struct:translate 0 0 #(struct:translate 18"
 #" 18 #(struct:ellipse 36 36 0 255 \"white\"))))) #(struct:translate 0"
 #" 0 #(struct:translate 20 20 #(struct:ellipse 40 40 0 255 \"red\"))))"
 #") #(struct:translate 0 0 #(struct:translate 25 25 #(struct:ellipse 5"
 #"0 50 0 255 \"transparent\")))) #(struct:bb 50.0 50.0 50.0) #f)"
) 0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 11 #"char->image"
0 0 25 3 1 #" "
0 0 19 3 3 #"\"W\""
0 0 25 3 2 #") "
0 6           4 81 527
(
 #"(#(struct:overlay #(struct:translate 5.0 5.0 #(struct:overlay #(stru"
 #"ct:translate 2.0 2.0 #(struct:overlay #(struct:translate 8.5 8.0 #(s"
 #"truct:translate 9.5 10.0 #(struct:text \"W\" 0 1 \"black\" 20 #f swi"
 #"ss normal normal #f))) #(struct:translate 0 0 #(struct:translate 18 "
 #"18 #(struct:ellipse 36 36 0 255 \"white\"))))) #(struct:translate 0 "
 #"0 #(struct:translate 20 20 #(struct:ellipse 40 40 0 255 \"red\")))))"
 #" #(struct:translate 0 0 #(struct:translate 25 25 #(struct:ellipse 50"
 #" 50 0 255 \"transparent\")))) #(struct:bb 50.0 50.0 50.0) #f)"
) 0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 12 #"; Exercise 3"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 10 #"; -> Image"
0 0 25 29 1 #"\n"
0 0 17 3 19 #"; Display end nodes"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 9 #"end-image"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 7 #"overlay"
0 0 25 3 2 #" ("
0 0 14 3 4 #"text"
0 0 25 3 1 #" "
0 0 19 3 4 #"\"\303\230\""
0 0 25 3 1 #" "
0 0 22 3 2 #"20"
0 0 25 3 1 #" "
0 0 19 3 7 #"\"black\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 6 #"circle"
0 0 25 3 1 #" "
0 0 22 3 2 #"18"
0 0 25 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 25 3 1 #" "
0 0 19 3 7 #"\"white\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 6 #"circle"
0 0 25 3 1 #" "
0 0 22 3 2 #"20"
0 0 25 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 25 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 6 #"circle"
0 0 25 3 1 #" "
0 0 22 3 2 #"25"
0 0 25 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 25 3 1 #" "
0 0 19 3 13 #"\"transparent\""
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 1 #" "
0 0 14 3 9 #"end-image"
0 0 25 3 1 #" "
0 6           4 81 529
(
 #"(#(struct:overlay #(struct:translate 5.0 5.0 #(struct:overlay #(stru"
 #"ct:translate 2.0 2.0 #(struct:overlay #(struct:translate 10.0 8.0 #("
 #"struct:translate 8.0 10.0 #(struct:text \"\303\230\" 0 1 \"black\" 2"
 #"0 #f swiss normal normal #f))) #(struct:translate 0 0 #(struct:trans"
 #"late 18 18 #(struct:ellipse 36 36 0 255 \"white\"))))) #(struct:tran"
 #"slate 0 0 #(struct:translate 20 20 #(struct:ellipse 40 40 0 255 \"re"
 #"d\"))))) #(struct:translate 0 0 #(struct:translate 25 25 #(struct:el"
 #"lipse 50 50 0 255 \"transparent\")))) #(struct:bb 50.0 50.0 50.0) #f"
 #")"
) 0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 12 #"; Exercise 4"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 13 #"; PT -> Image"
0 0 25 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 17 #"process-pt->image"
0 0 25 3 1 #" "
0 0 14 3 2 #"pt"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 4 #"end?"
0 0 25 3 1 #" "
0 0 14 3 2 #"pt"
0 0 25 3 2 #") "
0 0 14 3 3 #"..."
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 25 3 2 #" ("
0 0 14 3 9 #"node-char"
0 0 25 3 1 #" "
0 0 14 3 2 #"pt"
0 0 25 3 3 #")) "
0 0 14 3 3 #"..."
0 0 25 3 2 #" ("
0 0 14 3 20 #"process-lopt->images"
0 0 25 3 2 #" ("
0 0 14 3 10 #"node-nodes"
0 0 25 3 1 #" "
0 0 14 3 2 #"pt"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 25 3 1 #" "
0 0 14 3 3 #"..."
0 0 25 3 2 #" ("
0 0 14 3 9 #"node-char"
0 0 25 3 1 #" "
0 0 14 3 2 #"pt"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"          "
0 0 14 3 3 #"..."
0 0 25 3 2 #" ("
0 0 14 3 20 #"process-lopt->images"
0 0 25 3 2 #" ("
0 0 14 3 10 #"node-nodes"
0 0 25 3 1 #" "
0 0 14 3 2 #"pt"
0 0 25 3 3 #")) "
0 0 14 3 3 #"..."
0 0 25 3 3 #"]))"
0 0 25 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 25 29 1 #"\n"
0 0 17 3 31 #"; [ListOf PT] -> [ListOf Image]"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 20 #"process-lopt->images"
0 0 25 3 1 #" "
0 0 14 3 2 #"lc"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 5 #"foldr"
0 0 25 3 1 #" "
0 0 14 3 18 #"process-pt->images"
0 0 25 3 1 #" "
0 0 14 3 5 #"empty"
0 0 25 3 1 #" "
0 0 14 3 2 #"lc"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 12 #"; Exercise 5"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 26 #"; [ListOf Image] -> Number"
0 0 25 29 1 #"\n"
0 0 17 3 37 #"; Count the total length of the width"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 10 #"loim-width"
0 0 25 3 1 #" "
0 0 14 3 2 #"li"
0 0 25 3 3 #") ("
0 0 14 3 5 #"foldr"
0 0 25 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 25 3 2 #" ("
0 0 14 3 1 #"c"
0 0 25 3 1 #" "
0 0 14 3 1 #"r"
0 0 25 3 3 #") ("
0 0 14 3 1 #"+"
0 0 25 3 2 #" ("
0 0 14 3 11 #"image-width"
0 0 25 3 1 #" "
0 0 14 3 1 #"c"
0 0 25 3 2 #") "
0 0 14 3 1 #"r"
0 0 25 3 3 #")) "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 14 3 2 #"li"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 10 #"loim-width"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 14 3 9 #"end-image"
0 0 25 3 1 #" "
0 0 14 3 9 #"end-image"
0 0 25 3 1 #" "
0 0 14 3 9 #"end-image"
0 0 25 3 3 #")) "
0 0 22 3 3 #"150"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 17 3 26 #"; [ListOf Image] -> Number"
0 0 25 29 1 #"\n"
0 0 17 3 38 #"; Count the total length of the height"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 11 #"loim-height"
0 0 25 3 1 #" "
0 0 14 3 2 #"li"
0 0 25 3 3 #") ("
0 0 14 3 5 #"foldr"
0 0 25 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 25 3 2 #" ("
0 0 14 3 1 #"c"
0 0 25 3 1 #" "
0 0 14 3 1 #"r"
0 0 25 3 3 #") ("
0 0 14 3 3 #"max"
0 0 25 3 2 #" ("
0 0 14 3 12 #"image-height"
0 0 25 3 1 #" "
0 0 14 3 1 #"c"
0 0 25 3 2 #") "
0 0 14 3 1 #"r"
0 0 25 3 3 #")) "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 14 3 2 #"li"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 11 #"loim-height"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 14 3 9 #"end-image"
0 0 25 3 1 #" "
0 0 14 3 9 #"end-image"
0 0 25 3 1 #" "
0 0 14 3 9 #"end-image"
0 0 25 3 3 #")) "
0 0 22 3 2 #"50"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 12 #"; Exercise 6"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 42 #"; Number [ListOf Image] -> [ListOf Number]"
0 0 25 29 1 #"\n"
0 0 17 3 37 #"; Find the center point of each image"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 12 #"loim-centers"
0 0 25 3 1 #" "
0 0 14 3 6 #"offset"
0 0 25 3 1 #" "
0 0 14 3 3 #"lst"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 25 3 1 #" "
0 0 14 3 3 #"lst"
0 0 25 3 2 #") "
0 0 14 3 5 #"empty"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 1 #"+"
0 0 25 3 1 #" "
0 0 14 3 6 #"offset"
0 0 25 3 2 #" ("
0 0 14 3 1 #"/"
0 0 25 3 2 #" ("
0 0 14 3 11 #"image-width"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 3 #"lst"
0 0 25 3 3 #")) "
0 0 22 3 1 #"2"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 17 #"                ("
0 0 14 3 12 #"loim-centers"
0 0 25 3 2 #" ("
0 0 14 3 1 #"+"
0 0 25 3 1 #" "
0 0 14 3 6 #"offset"
0 0 25 3 2 #" ("
0 0 14 3 11 #"image-width"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 3 #"lst"
0 0 25 3 5 #"))) ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 3 #"lst"
0 0 25 3 6 #")))]))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 12 #"loim-centers"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 14 3 9 #"end-image"
0 0 25 3 1 #" "
0 0 14 3 9 #"end-image"
0 0 25 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 2 #"25"
0 0 25 3 1 #" "
0 0 22 3 2 #"75"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 12 #"; Exercise 7"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 25 #"; [ListOf Image] -> Image"
0 0 25 29 1 #"\n"
0 0 17 3 39 #"; Create the background image of the PT"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 10 #"background"
0 0 25 3 1 #" "
0 0 14 3 4 #"loim"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 25 3 1 #" "
0 0 14 3 4 #"loim"
0 0 25 3 3 #") ("
0 0 14 3 9 #"rectangle"
0 0 25 3 1 #" "
0 0 22 3 2 #"50"
0 0 25 3 1 #" "
0 0 22 3 2 #"50"
0 0 25 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 25 3 1 #" "
0 0 19 3 13 #"\"transparent\""
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 9 #"rectangle"
0 0 25 3 2 #" ("
0 0 14 3 10 #"loim-width"
0 0 25 3 1 #" "
0 0 14 3 4 #"loim"
0 0 25 3 3 #") ("
0 0 14 3 1 #"+"
0 0 25 3 1 #" "
0 0 22 3 3 #"100"
0 0 25 3 2 #" ("
0 0 14 3 11 #"loim-height"
0 0 25 3 1 #" "
0 0 14 3 4 #"loim"
0 0 25 3 3 #")) "
0 0 19 3 7 #"\"solid\""
0 0 25 3 1 #" "
0 0 19 3 13 #"\"transparent\""
0 0 25 3 4 #")]))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 10 #"background"
0 0 25 3 1 #" "
0 0 14 3 5 #"empty"
0 0 25 3 3 #") ("
0 0 14 3 6 #"square"
0 0 25 3 1 #" "
0 0 22 3 2 #"50"
0 0 25 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 25 3 1 #" "
0 0 19 3 13 #"\"transparent\""
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 10 #"background"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 14 3 9 #"end-image"
0 0 25 3 1 #" "
0 0 14 3 9 #"end-image"
0 0 25 3 4 #")) ("
0 0 14 3 9 #"rectangle"
0 0 25 3 1 #" "
0 0 22 3 3 #"100"
0 0 25 3 1 #" "
0 0 22 3 3 #"150"
0 0 25 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 25 3 1 #" "
0 0 19 3 13 #"\"transparent\""
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 12 #"; Exercise 8"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 32 #"; Image [ListOf Number] -> Image"
0 0 25 29 1 #"\n"
0 0 17 3 34 #"; Draw each line between two nodes"
0 0 25 29 1 #"\n"
0 0 17 3 81
(
 #"; Because the radius of the image is 25, if we want to draw the imag"
 #"e on the top,"
) 0 0 25 29 1 #"\n"
0 0 17 3 42 #"; we need to put the upper point at y = 25"
0 0 25 29 1 #"\n"
0 0 17 3 63
#"; And because of the vetical distance between two nodes is 100,"
0 0 25 29 1 #"\n"
0 0 17 3 72
(
 #"; so the difference of y value between root node and child nodes is "
 #"100."
) 0 0 25 29 1 #"\n"
0 0 17 3 83
(
 #"; Because we need to put the upper node on the central top of the gi"
 #"ven background,"
) 0 0 25 29 1 #"\n"
0 0 17 3 52 #"; the value of x need to be half of the total width."
0 0 25 29 1 #"\n"
0 0 17 3 56 #"; The given list is the center point of a list of image,"
0 0 25 29 1 #"\n"
0 0 17 3 4 #"; so"
0 0 17 3 66
#" each child nodes has the same value of the given list of numbers."
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 10 #"draw-lines"
0 0 25 3 1 #" "
0 0 14 3 2 #"bk"
0 0 25 3 1 #" "
0 0 14 3 3 #"loc"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 5 #"foldr"
0 0 25 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 25 3 2 #" ("
0 0 14 3 1 #"c"
0 0 25 3 1 #" "
0 0 14 3 1 #"r"
0 0 25 3 3 #") ("
0 0 14 3 8 #"add-line"
0 0 25 3 1 #" "
0 0 14 3 1 #"r"
0 0 25 3 2 #" ("
0 0 14 3 1 #"/"
0 0 25 3 2 #" ("
0 0 14 3 11 #"image-width"
0 0 25 3 1 #" "
0 0 14 3 2 #"bk"
0 0 25 3 2 #") "
0 0 22 3 1 #"2"
0 0 25 3 2 #") "
0 0 22 3 2 #"25"
0 0 25 3 1 #" "
0 0 14 3 1 #"c"
0 0 25 3 1 #" "
0 0 22 3 3 #"125"
0 0 25 3 1 #" "
0 0 19 3 7 #"\"black\""
0 0 25 3 3 #")) "
0 0 14 3 2 #"bk"
0 0 25 3 1 #" "
0 0 14 3 3 #"loc"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 10 #"draw-lines"
0 0 25 3 2 #" ("
0 0 14 3 10 #"background"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 14 3 9 #"end-image"
0 0 25 3 1 #" "
0 0 14 3 9 #"end-image"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 27 #"                          ("
0 0 14 3 12 #"loim-centers"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 14 3 9 #"end-image"
0 0 25 3 1 #" "
0 0 14 3 9 #"end-image"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"              "
0 6           4 81 475
(
 #"(#(struct:translate 0 0 #(struct:overlay #(struct:line-segment #(str"
 #"uct:point 50 25) #(struct:point 25 125) \"black\") #(struct:translat"
 #"e 0 0 #(struct:overlay #(struct:line-segment #(struct:point 50 25) #"
 #"(struct:point 75 125) \"black\") #(struct:translate 0 0 #(struct:pol"
 #"ygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 1"
 #"00 0 0 0) #(struct:pulled-point 0 0 100 150 0 0) #(struct:pulled-poi"
 #"nt 0 0 0 150 0 0)) 255 \"transparent\")))))) #(struct:bb 100 150 150"
 #") #f)"
) 0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 12 #"; Exercise 9"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 29 #"; Image ListOfImages -> Image"
0 0 25 29 1 #"\n"
0 0 17 3 44 #"; Draw child nodes at the below of the image"
0 0 25 29 1 #"\n"
0 0 17 3 66
#"; For each child nodes, they top need to be put on a stright line,"
0 0 25 29 1 #"\n"
0 0 17 3 64
#"; so we need to use beside/align \"top\" to align they on the top."
0 0 25 29 1 #"\n"
0 0 17 3 73
(
 #"; And we need to put all of these images which have already been com"
 #"bined"
) 0 0 25 29 1 #"\n"
0 0 17 3 82
(
 #"; into one at 100 from the top. Because we do not know exactly size "
 #"of this image,"
) 0 0 25 29 1 #"\n"
0 0 17 3 60
#"; we can put the left top point at (0, 100) to keep it work."
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 9 #"draw-loim"
0 0 25 3 1 #" "
0 0 14 3 2 #"bk"
0 0 25 3 1 #" "
0 0 14 3 4 #"loim"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 17 #"place-image/align"
0 0 25 3 2 #" ("
0 0 14 3 5 #"foldr"
0 0 25 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 25 3 2 #" ("
0 0 14 3 1 #"c"
0 0 25 3 1 #" "
0 0 14 3 1 #"r"
0 0 25 3 3 #") ("
0 0 14 3 12 #"beside/align"
0 0 25 3 1 #" "
0 0 19 3 5 #"\"top\""
0 0 25 3 1 #" "
0 0 14 3 1 #"c"
0 0 25 3 1 #" "
0 0 14 3 1 #"r"
0 0 25 3 4 #")) ("
0 0 14 3 9 #"rectangle"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 25 3 1 #" "
0 0 19 3 13 #"\"transparent\""
0 0 25 3 2 #") "
0 0 14 3 4 #"loim"
0 0 25 3 1 #")"
0 1 25 65 1 #"\t"
0 0 25 3 1 #" "
0 1 25 65 1 #"\t"
0 0 25 3 1 #" "
0 1 25 65 1 #"\t"
0 0 25 3 1 #" "
0 1 25 65 1 #"\t"
0 0 25 3 1 #" "
0 0 25 29 1 #"\n"
0 0 25 3 21 #"                     "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 3 #"100"
0 1 25 65 1 #"\t"
0 0 25 3 1 #" "
0 1 25 65 1 #"\t"
0 0 25 3 1 #" "
0 1 25 65 1 #"\t"
0 0 25 3 1 #" "
0 1 25 65 1 #"\t"
0 0 25 3 1 #" "
0 0 25 29 1 #"\n"
0 0 25 3 21 #"                     "
0 0 19 3 6 #"\"left\""
0 0 25 3 1 #" "
0 0 19 3 5 #"\"top\""
0 0 25 3 1 #" "
0 0 14 3 2 #"bk"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 9 #"draw-loim"
0 0 25 3 2 #" ("
0 0 14 3 10 #"background"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 14 3 9 #"end-image"
0 0 25 3 1 #" "
0 0 14 3 9 #"end-image"
0 0 25 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 14 3 9 #"end-image"
0 0 25 3 1 #" "
0 0 14 3 9 #"end-image"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"              "
0 6           4 81 1476
(
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 100 0) #(struct:p"
 #"oint 100 150) #(struct:point 0 150)) #(struct:translate 0 0 #(struct"
 #":overlay #(struct:translate 0 100 #(struct:overlay #(struct:translat"
 #"e 0 0 #(struct:overlay #(struct:overlay #(struct:overlay #(struct:tr"
 #"anslate 25.0 25.0 #(struct:text \"\303\230\" 0 1 \"black\" 20 #f swi"
 #"ss normal normal #f)) #(struct:translate 25.0 25.0 #(struct:ellipse "
 #"36 36 0 255 \"white\"))) #(struct:translate 25.0 25.0 #(struct:ellip"
 #"se 40 40 0 255 \"red\"))) #(struct:translate 25 25 #(struct:ellipse "
 #"50 50 0 255 \"transparent\")))) #(struct:translate 50.0 0 #(struct:o"
 #"verlay #(struct:translate 0 0 #(struct:overlay #(struct:overlay #(st"
 #"ruct:overlay #(struct:translate 25.0 25.0 #(struct:text \"\303\230\""
 #" 0 1 \"black\" 20 #f swiss normal normal #f)) #(struct:translate 25."
 #"0 25.0 #(struct:ellipse 36 36 0 255 \"white\"))) #(struct:translate "
 #"25.0 25.0 #(struct:ellipse 40 40 0 255 \"red\"))) #(struct:translate"
 #" 25 25 #(struct:ellipse 50 50 0 255 \"transparent\")))) #(struct:tra"
 #"nslate 50.0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pull"
 #"ed-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 0 0 0 0) #(struct:pu"
 #"lled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 0 0 0 0)) 255 \"tr"
 #"ansparent\"))))))) #(struct:translate 0 0 #(struct:translate 0 0 #(s"
 #"truct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-po"
 #"int 0 0 100 0 0 0) #(struct:pulled-point 0 0 100 150 0 0) #(struct:p"
 #"ulled-point 0 0 0 150 0 0)) 255 \"transparent\")))))) #(struct:bb 10"
 #"0 150 150.0) #f)"
) 0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 13 #"; Exercise 10"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 19 #"; Image PT -> Image"
0 0 25 29 1 #"\n"
0 0 17 3 42 #"; Draw the PT node on the given background"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 9 #"draw-node"
0 0 25 3 1 #" "
0 0 14 3 2 #"bk"
0 0 25 3 1 #" "
0 0 14 3 2 #"pt"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 11 #"place-image"
0 0 25 3 2 #" ("
0 0 14 3 11 #"char->image"
0 0 25 3 2 #" ("
0 0 14 3 6 #"string"
0 0 25 3 2 #" ("
0 0 14 3 9 #"node-char"
0 0 25 3 1 #" "
0 0 14 3 2 #"pt"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 1 #"/"
0 0 25 3 2 #" ("
0 0 14 3 11 #"image-width"
0 0 25 3 1 #" "
0 0 14 3 2 #"bk"
0 0 25 3 2 #") "
0 0 22 3 1 #"2"
0 0 25 3 2 #") "
0 0 22 3 2 #"25"
0 0 25 3 1 #" "
0 0 14 3 2 #"bk"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 9 #"draw-node"
0 0 25 3 2 #" ("
0 0 14 3 10 #"background"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 14 3 9 #"end-image"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 26 #"                         ("
0 0 14 3 9 #"make-node"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\o"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 8 #"make-end"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"              "
0 6           4 81 931
(
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 50 0) #(struct:po"
 #"int 50 150) #(struct:point 0 150)) #(struct:translate 0 0 #(struct:o"
 #"verlay #(struct:translate 0.0 0.0 #(struct:overlay #(struct:translat"
 #"e 5.0 5.0 #(struct:overlay #(struct:translate 2.0 2.0 #(struct:overl"
 #"ay #(struct:translate 12.5 8.0 #(struct:translate 5.5 10.0 #(struct:"
 #"text \"o\" 0 1 \"black\" 20 #f swiss normal normal #f))) #(struct:tr"
 #"anslate 0 0 #(struct:translate 18 18 #(struct:ellipse 36 36 0 255 \""
 #"white\"))))) #(struct:translate 0 0 #(struct:translate 20 20 #(struc"
 #"t:ellipse 40 40 0 255 \"red\"))))) #(struct:translate 0 0 #(struct:t"
 #"ranslate 25 25 #(struct:ellipse 50 50 0 255 \"transparent\"))))) #(s"
 #"truct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struc"
 #"t:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 50 0 0 0) #(st"
 #"ruct:pulled-point 0 0 50 150 0 0) #(struct:pulled-point 0 0 0 150 0 "
 #"0)) 255 \"transparent\")))))) #(struct:bb 50 150 150.0) #f)"
) 0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 13 #"; Exercise 11"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 13 #"; PT -> Image"
0 0 25 29 1 #"\n"
0 0 17 3 40 #"; Draw the whole picture of the given pt"
0 0 25 29 1 #"\n"
0 0 17 3 57 #"; Draw-node needs to draw the father node on a background"
0 0 25 29 1 #"\n"
0 0 17 3 44 #"; which already has all other image on that."
0 0 25 29 1 #"\n"
0 0 17 3 55 #"; In order to creat this background used in draw-nodes,"
0 0 25 29 1 #"\n"
0 0 17 3 70
(
 #"; we need to draw all the child nodes on the image wich contain line"
 #"s."
) 0 0 25 29 1 #"\n"
0 0 17 3 65
#"; To draw lines, we need to use draw-lines function to draw these"
0 0 25 29 1 #"\n"
0 0 17 3 58
#"; on a suitable background. So we need background function"
0 0 25 29 1 #"\n"
0 0 17 3 39 #"; to get a big enough background image."
0 0 25 29 1 #"\n"
0 0 17 3 47 #"; And draw-lines needs to be the base function,"
0 0 25 29 1 #"\n"
0 0 17 3 84
(
 #"; because all ther images including father node and child nodes are "
 #"above the lines."
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 9 #"pt->image"
0 0 25 3 1 #" "
0 0 14 3 2 #"pt"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 4 #"end?"
0 0 25 3 1 #" "
0 0 14 3 2 #"pt"
0 0 25 3 3 #") ("
0 0 14 3 11 #"place-image"
0 0 25 3 1 #" "
0 0 14 3 9 #"end-image"
0 0 25 3 1 #" "
0 0 22 3 2 #"25"
0 0 25 3 1 #" "
0 0 22 3 2 #"25"
0 0 25 3 2 #" ("
0 0 14 3 10 #"background"
0 0 25 3 1 #" "
0 0 14 3 5 #"empty"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 25 3 2 #" ("
0 0 14 3 9 #"node-char"
0 0 25 3 1 #" "
0 0 14 3 2 #"pt"
0 0 25 3 4 #")) ("
0 0 14 3 5 #"foldr"
0 0 25 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 25 3 2 #" ("
0 0 14 3 1 #"c"
0 0 25 3 1 #" "
0 0 14 3 1 #"r"
0 0 25 3 3 #") ("
0 0 14 3 12 #"beside/align"
0 0 25 3 1 #" "
0 0 19 3 5 #"\"top\""
0 0 25 3 2 #" ("
0 0 14 3 9 #"pt->image"
0 0 25 3 1 #" "
0 0 14 3 1 #"c"
0 0 25 3 2 #") "
0 0 14 3 1 #"r"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 37 #"                                    ("
0 0 14 3 9 #"rectangle"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 25 3 1 #" "
0 0 19 3 13 #"\"transparent\""
0 0 25 3 3 #") ("
0 0 14 3 10 #"node-nodes"
0 0 25 3 1 #" "
0 0 14 3 2 #"pt"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 9 #"draw-node"
0 0 25 3 2 #" ("
0 0 14 3 9 #"draw-loim"
0 0 25 3 2 #" ("
0 0 14 3 10 #"draw-lines"
0 0 25 3 2 #" ("
0 0 14 3 10 #"background"
0 0 25 3 2 #" ("
0 0 14 3 3 #"map"
0 0 25 3 1 #" "
0 0 14 3 9 #"pt->image"
0 0 25 3 2 #" ("
0 0 14 3 10 #"node-nodes"
0 0 25 3 1 #" "
0 0 14 3 2 #"pt"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 45 #"                                            ("
0 0 14 3 12 #"loim-centers"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #" ("
0 0 14 3 3 #"map"
0 0 25 3 1 #" "
0 0 14 3 9 #"pt->image"
0 0 25 3 2 #" ("
0 0 14 3 10 #"node-nodes"
0 0 25 3 1 #" "
0 0 14 3 2 #"pt"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 33 #"                                ("
0 0 14 3 3 #"map"
0 0 25 3 1 #" "
0 0 14 3 9 #"pt->image"
0 0 25 3 2 #" ("
0 0 14 3 10 #"node-nodes"
0 0 25 3 1 #" "
0 0 14 3 2 #"pt"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 21 #"                     "
0 0 14 3 2 #"pt"
0 0 25 3 4 #")]))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 9 #"pt->image"
0 0 25 3 1 #" "
0 0 14 3 3 #"pt0"
0 0 25 3 2 #") "
0 6           4 81 16755
(
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 300 0) #(struct:p"
 #"oint 300 350) #(struct:point 0 350)) #(struct:translate 0 0 #(struct"
 #":overlay #(struct:translate 125.0 0.0 #(struct:overlay #(struct:tran"
 #"slate 5.0 5.0 #(struct:overlay #(struct:translate 2.0 2.0 #(struct:o"
 #"verlay #(struct:translate 12.5 8.0 #(struct:translate 5.5 10.0 #(str"
 #"uct:text \"o\" 0 1 \"black\" 20 #f swiss normal normal #f))) #(struc"
 #"t:translate 0 0 #(struct:translate 18 18 #(struct:ellipse 36 36 0 25"
 #"5 \"white\"))))) #(struct:translate 0 0 #(struct:translate 20 20 #(s"
 #"truct:ellipse 40 40 0 255 \"red\"))))) #(struct:translate 0 0 #(stru"
 #"ct:translate 25 25 #(struct:ellipse 50 50 0 255 \"transparent\")))))"
 #" #(struct:translate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:"
 #"point 300 0) #(struct:point 300 350) #(struct:point 0 350)) #(struct"
 #":translate 0 0 #(struct:overlay #(struct:translate 0 100 #(struct:ov"
 #"erlay #(struct:translate 0 0 #(struct:crop (#(struct:point 0 0) #(st"
 #"ruct:point 100 0) #(struct:point 100 250) #(struct:point 0 250)) #(s"
 #"truct:translate 0 0 #(struct:overlay #(struct:translate 25.0 0.0 #(s"
 #"truct:overlay #(struct:translate 5.0 5.0 #(struct:overlay #(struct:t"
 #"ranslate 2.0 2.0 #(struct:overlay #(struct:translate 12.5 8.0 #(stru"
 #"ct:translate 5.5 10.0 #(struct:text \"n\" 0 1 \"black\" 20 #f swiss "
 #"normal normal #f))) #(struct:translate 0 0 #(struct:translate 18 18 "
 #"#(struct:ellipse 36 36 0 255 \"white\"))))) #(struct:translate 0 0 #"
 #"(struct:translate 20 20 #(struct:ellipse 40 40 0 255 \"red\"))))) #("
 #"struct:translate 0 0 #(struct:translate 25 25 #(struct:ellipse 50 50"
 #" 0 255 \"transparent\"))))) #(struct:translate 0 0 #(struct:crop (#("
 #"struct:point 0 0) #(struct:point 100 0) #(struct:point 100 250) #(st"
 #"ruct:point 0 250)) #(struct:translate 0 0 #(struct:overlay #(struct:"
 #"translate 0 100 #(struct:overlay #(struct:translate 0 0 #(struct:cro"
 #"p (#(struct:point 0 0) #(struct:point 50 0) #(struct:point 50 50) #("
 #"struct:point 0 50)) #(struct:translate 0 0 #(struct:overlay #(struct"
 #":translate 0.0 0.0 #(struct:overlay #(struct:translate 5.0 5.0 #(str"
 #"uct:overlay #(struct:translate 2.0 2.0 #(struct:overlay #(struct:tra"
 #"nslate 10.0 8.0 #(struct:translate 8.0 10.0 #(struct:text \"\303\230"
 #"\" 0 1 \"black\" 20 #f swiss normal normal #f))) #(struct:translate "
 #"0 0 #(struct:translate 18 18 #(struct:ellipse 36 36 0 255 \"white\")"
 #")))) #(struct:translate 0 0 #(struct:translate 20 20 #(struct:ellips"
 #"e 40 40 0 255 \"red\"))))) #(struct:translate 0 0 #(struct:translate"
 #" 25 25 #(struct:ellipse 50 50 0 255 \"transparent\"))))) #(struct:tr"
 #"anslate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled"
 #"-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 50 0 0 0) #(struct:pul"
 #"led-point 0 0 50 50 0 0) #(struct:pulled-point 0 0 0 50 0 0)) 255 \""
 #"transparent\"))))))) #(struct:translate 50 0 #(struct:overlay #(stru"
 #"ct:translate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:point 5"
 #"0 0) #(struct:point 50 150) #(struct:point 0 150)) #(struct:translat"
 #"e 0 0 #(struct:overlay #(struct:translate 0.0 0.0 #(struct:overlay #"
 #"(struct:translate 5.0 5.0 #(struct:overlay #(struct:translate 2.0 2."
 #"0 #(struct:overlay #(struct:translate 12.5 8.0 #(struct:translate 5."
 #"5 10.0 #(struct:text \"e\" 0 1 \"black\" 20 #f swiss normal normal #"
 #"f))) #(struct:translate 0 0 #(struct:translate 18 18 #(struct:ellips"
 #"e 36 36 0 255 \"white\"))))) #(struct:translate 0 0 #(struct:transla"
 #"te 20 20 #(struct:ellipse 40 40 0 255 \"red\"))))) #(struct:translat"
 #"e 0 0 #(struct:translate 25 25 #(struct:ellipse 50 50 0 255 \"transp"
 #"arent\"))))) #(struct:translate 0 0 #(struct:crop (#(struct:point 0 "
 #"0) #(struct:point 50 0) #(struct:point 50 150) #(struct:point 0 150)"
 #") #(struct:translate 0 0 #(struct:overlay #(struct:translate 0 100 #"
 #"(struct:overlay #(struct:translate 0 0 #(struct:crop (#(struct:point"
 #" 0 0) #(struct:point 50 0) #(struct:point 50 50) #(struct:point 0 50"
 #")) #(struct:translate 0 0 #(struct:overlay #(struct:translate 0.0 0."
 #"0 #(struct:overlay #(struct:translate 5.0 5.0 #(struct:overlay #(str"
 #"uct:translate 2.0 2.0 #(struct:overlay #(struct:translate 10.0 8.0 #"
 #"(struct:translate 8.0 10.0 #(struct:text \"\303\230\" 0 1 \"black\" "
 #"20 #f swiss normal normal #f))) #(struct:translate 0 0 #(struct:tran"
 #"slate 18 18 #(struct:ellipse 36 36 0 255 \"white\"))))) #(struct:tra"
 #"nslate 0 0 #(struct:translate 20 20 #(struct:ellipse 40 40 0 255 \"r"
 #"ed\"))))) #(struct:translate 0 0 #(struct:translate 25 25 #(struct:e"
 #"llipse 50 50 0 255 \"transparent\"))))) #(struct:translate 0 0 #(str"
 #"uct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 "
 #"0) #(struct:pulled-point 0 0 50 0 0 0) #(struct:pulled-point 0 0 50 "
 #"50 0 0) #(struct:pulled-point 0 0 0 50 0 0)) 255 \"transparent\"))))"
 #"))) #(struct:translate 50 0 #(struct:translate 0 0 #(struct:polygon "
 #"(#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 0 0 0 "
 #"0) #(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 0 0 "
 #"0 0)) 255 \"transparent\"))))) #(struct:translate 0 0 #(struct:trans"
 #"late 0 0 #(struct:overlay #(struct:line-segment #(struct:point 25 25"
 #") #(struct:point 25 125) \"black\") #(struct:translate 0 0 #(struct:"
 #"polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 "
 #"0 50 0 0 0) #(struct:pulled-point 0 0 50 150 0 0) #(struct:pulled-po"
 #"int 0 0 0 150 0 0)) 255 \"transparent\"))))))))))))) #(struct:transl"
 #"ate 50 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-po"
 #"int 0 0 0 0 0 0) #(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-"
 #"point 0 0 0 0 0 0) #(struct:pulled-point 0 0 0 0 0 0)) 255 \"transpa"
 #"rent\"))))))) #(struct:translate 0 0 #(struct:translate 0 0 #(struct"
 #":overlay #(struct:line-segment #(struct:point 50 25) #(struct:point "
 #"25 125) \"black\") #(struct:translate 0 0 #(struct:overlay #(struct:"
 #"line-segment #(struct:point 50 25) #(struct:point 75 125) \"black\")"
 #" #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 "
 #"0 0 0 0) #(struct:pulled-point 0 0 100 0 0 0) #(struct:pulled-point "
 #"0 0 100 250 0 0) #(struct:pulled-point 0 0 0 250 0 0)) 255 \"transpa"
 #"rent\"))))))))))))))) #(struct:translate 100 0 #(struct:overlay #(st"
 #"ruct:translate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:point"
 #" 150 0) #(struct:point 150 250) #(struct:point 0 250)) #(struct:tran"
 #"slate 0 0 #(struct:overlay #(struct:translate 50.0 0.0 #(struct:over"
 #"lay #(struct:translate 5.0 5.0 #(struct:overlay #(struct:translate 2"
 #".0 2.0 #(struct:overlay #(struct:translate 15.0 8.0 #(struct:transla"
 #"te 3.0 10.0 #(struct:text \"f\" 0 1 \"black\" 20 #f swiss normal nor"
 #"mal #f))) #(struct:translate 0 0 #(struct:translate 18 18 #(struct:e"
 #"llipse 36 36 0 255 \"white\"))))) #(struct:translate 0 0 #(struct:tr"
 #"anslate 20 20 #(struct:ellipse 40 40 0 255 \"red\"))))) #(struct:tra"
 #"nslate 0 0 #(struct:translate 25 25 #(struct:ellipse 50 50 0 255 \"t"
 #"ransparent\"))))) #(struct:translate 0 0 #(struct:crop (#(struct:poi"
 #"nt 0 0) #(struct:point 150 0) #(struct:point 150 250) #(struct:point"
 #" 0 250)) #(struct:translate 0 0 #(struct:overlay #(struct:translate "
 #"0 100 #(struct:overlay #(struct:translate 0 0 #(struct:crop (#(struc"
 #"t:point 0 0) #(struct:point 50 0) #(struct:point 50 50) #(struct:poi"
 #"nt 0 50)) #(struct:translate 0 0 #(struct:overlay #(struct:translate"
 #" 0.0 0.0 #(struct:overlay #(struct:translate 5.0 5.0 #(struct:overla"
 #"y #(struct:translate 2.0 2.0 #(struct:overlay #(struct:translate 10."
 #"0 8.0 #(struct:translate 8.0 10.0 #(struct:text \"\303\230\" 0 1 \"b"
 #"lack\" 20 #f swiss normal normal #f))) #(struct:translate 0 0 #(stru"
 #"ct:translate 18 18 #(struct:ellipse 36 36 0 255 \"white\"))))) #(str"
 #"uct:translate 0 0 #(struct:translate 20 20 #(struct:ellipse 40 40 0 "
 #"255 \"red\"))))) #(struct:translate 0 0 #(struct:translate 25 25 #(s"
 #"truct:ellipse 50 50 0 255 \"transparent\"))))) #(struct:translate 0 "
 #"0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0"
 #" 0 0 0 0) #(struct:pulled-point 0 0 50 0 0 0) #(struct:pulled-point "
 #"0 0 50 50 0 0) #(struct:pulled-point 0 0 0 50 0 0)) 255 \"transparen"
 #"t\"))))))) #(struct:translate 50 0 #(struct:overlay #(struct:transla"
 #"te 0 0 #(struct:crop (#(struct:point 0 0) #(struct:point 50 0) #(str"
 #"uct:point 50 150) #(struct:point 0 150)) #(struct:translate 0 0 #(st"
 #"ruct:overlay #(struct:translate 0.0 0.0 #(struct:overlay #(struct:tr"
 #"anslate 5.0 5.0 #(struct:overlay #(struct:translate 2.0 2.0 #(struct"
 #":overlay #(struct:translate 15.0 8.0 #(struct:translate 3.0 10.0 #(s"
 #"truct:text \"f\" 0 1 \"black\" 20 #f swiss normal normal #f))) #(str"
 #"uct:translate 0 0 #(struct:translate 18 18 #(struct:ellipse 36 36 0 "
 #"255 \"white\"))))) #(struct:translate 0 0 #(struct:translate 20 20 #"
 #"(struct:ellipse 40 40 0 255 \"red\"))))) #(struct:translate 0 0 #(st"
 #"ruct:translate 25 25 #(struct:ellipse 50 50 0 255 \"transparent\")))"
 #")) #(struct:translate 0 0 #(struct:crop (#(struct:point 0 0) #(struc"
 #"t:point 50 0) #(struct:point 50 150) #(struct:point 0 150)) #(struct"
 #":translate 0 0 #(struct:overlay #(struct:translate 0 100 #(struct:ov"
 #"erlay #(struct:translate 0 0 #(struct:crop (#(struct:point 0 0) #(st"
 #"ruct:point 50 0) #(struct:point 50 50) #(struct:point 0 50)) #(struc"
 #"t:translate 0 0 #(struct:overlay #(struct:translate 0.0 0.0 #(struct"
 #":overlay #(struct:translate 5.0 5.0 #(struct:overlay #(struct:transl"
 #"ate 2.0 2.0 #(struct:overlay #(struct:translate 10.0 8.0 #(struct:tr"
 #"anslate 8.0 10.0 #(struct:text \"\303\230\" 0 1 \"black\" 20 #f swis"
 #"s normal normal #f))) #(struct:translate 0 0 #(struct:translate 18 1"
 #"8 #(struct:ellipse 36 36 0 255 \"white\"))))) #(struct:translate 0 0"
 #" #(struct:translate 20 20 #(struct:ellipse 40 40 0 255 \"red\"))))) "
 #"#(struct:translate 0 0 #(struct:translate 25 25 #(struct:ellipse 50 "
 #"50 0 255 \"transparent\"))))) #(struct:translate 0 0 #(struct:transl"
 #"ate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struc"
 #"t:pulled-point 0 0 50 0 0 0) #(struct:pulled-point 0 0 50 50 0 0) #("
 #"struct:pulled-point 0 0 0 50 0 0)) 255 \"transparent\"))))))) #(stru"
 #"ct:translate 50 0 #(struct:translate 0 0 #(struct:polygon (#(struct:"
 #"pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 0 0 0 0) #(struc"
 #"t:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 0 0 0 0)) 255 "
 #"\"transparent\"))))) #(struct:translate 0 0 #(struct:translate 0 0 #"
 #"(struct:overlay #(struct:line-segment #(struct:point 25 25) #(struct"
 #":point 25 125) \"black\") #(struct:translate 0 0 #(struct:polygon (#"
 #"(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 50 0 0 0"
 #") #(struct:pulled-point 0 0 50 150 0 0) #(struct:pulled-point 0 0 0 "
 #"150 0 0)) 255 \"transparent\"))))))))))))) #(struct:translate 50 0 #"
 #"(struct:overlay #(struct:translate 0 0 #(struct:crop (#(struct:point"
 #" 0 0) #(struct:point 50 0) #(struct:point 50 150) #(struct:point 0 1"
 #"50)) #(struct:translate 0 0 #(struct:overlay #(struct:translate 0.0 "
 #"0.0 #(struct:overlay #(struct:translate 5.0 5.0 #(struct:overlay #(s"
 #"truct:translate 2.0 2.0 #(struct:overlay #(struct:translate 15.0 8.0"
 #" #(struct:translate 3.0 10.0 #(struct:text \"t\" 0 1 \"black\" 20 #f"
 #" swiss normal normal #f))) #(struct:translate 0 0 #(struct:translate"
 #" 18 18 #(struct:ellipse 36 36 0 255 \"white\"))))) #(struct:translat"
 #"e 0 0 #(struct:translate 20 20 #(struct:ellipse 40 40 0 255 \"red\")"
 #")))) #(struct:translate 0 0 #(struct:translate 25 25 #(struct:ellips"
 #"e 50 50 0 255 \"transparent\"))))) #(struct:translate 0 0 #(struct:c"
 #"rop (#(struct:point 0 0) #(struct:point 50 0) #(struct:point 50 150)"
 #" #(struct:point 0 150)) #(struct:translate 0 0 #(struct:overlay #(st"
 #"ruct:translate 0 100 #(struct:overlay #(struct:translate 0 0 #(struc"
 #"t:crop (#(struct:point 0 0) #(struct:point 50 0) #(struct:point 50 5"
 #"0) #(struct:point 0 50)) #(struct:translate 0 0 #(struct:overlay #(s"
 #"truct:translate 0.0 0.0 #(struct:overlay #(struct:translate 5.0 5.0 "
 #"#(struct:overlay #(struct:translate 2.0 2.0 #(struct:overlay #(struc"
 #"t:translate 10.0 8.0 #(struct:tr"
 #"anslate 8.0 10.0 #(struct:text \"\303\230\" 0 1 \"black\" 20 #f swis"
 #"s normal normal #f))) #(struct:translate 0 0 #(struct:translate 18 1"
 #"8 #(struct:ellipse 36 36 0 255 \"white\"))))) #(struct:translate 0 0"
 #" #(struct:translate 20 20 #(struct:ellipse 40 40 0 255 \"red\"))))) "
 #"#(struct:translate 0 0 #(struct:translate 25 25 #(struct:ellipse 50 "
 #"50 0 255 \"transparent\"))))) #(struct:translate 0 0 #(struct:transl"
 #"ate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struc"
 #"t:pulled-point 0 0 50 0 0 0) #(struct:pulled-point 0 0 50 50 0 0) #("
 #"struct:pulled-point 0 0 0 50 0 0)) 255 \"transparent\"))))))) #(stru"
 #"ct:translate 50 0 #(struct:translate 0 0 #(struct:polygon (#(struct:"
 #"pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 0 0 0 0) #(struc"
 #"t:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 0 0 0 0)) 255 "
 #"\"transparent\"))))) #(struct:translate 0 0 #(struct:translate 0 0 #"
 #"(struct:overlay #(struct:line-segment #(struct:point 25 25) #(struct"
 #":point 25 125) \"black\") #(struct:translate 0 0 #(struct:polygon (#"
 #"(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 50 0 0 0"
 #") #(struct:pulled-point 0 0 50 150 0 0) #(struct:pulled-point 0 0 0 "
 #"150 0 0)) 255 \"transparent\"))))))))))))) #(struct:translate 50 0 #"
 #"(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 "
 #"0 0 0) #(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 "
 #"0 0 0 0) #(struct:pulled-point 0 0 0 0 0 0)) 255 \"transparent\"))))"
 #"))))) #(struct:translate 0 0 #(struct:translate 0 0 #(struct:overlay"
 #" #(struct:line-segment #(struct:point 75 25) #(struct:point 25 125) "
 #"\"black\") #(struct:translate 0 0 #(struct:overlay #(struct:line-seg"
 #"ment #(struct:point 75 25) #(struct:point 75 125) \"black\") #(struc"
 #"t:translate 0 0 #(struct:overlay #(struct:line-segment #(struct:poin"
 #"t 75 25) #(struct:point 125 125) \"black\") #(struct:translate 0 0 #"
 #"(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-"
 #"point 0 0 150 0 0 0) #(struct:pulled-point 0 0 150 250 0 0) #(struct"
 #":pulled-point 0 0 0 250 0 0)) 255 \"transparent\"))))))))))))))))) #"
 #"(struct:translate 150 0 #(struct:overlay #(struct:translate 0 0 #(st"
 #"ruct:crop (#(struct:point 0 0) #(struct:point 50 0) #(struct:point 5"
 #"0 150) #(struct:point 0 150)) #(struct:translate 0 0 #(struct:overla"
 #"y #(struct:translate 0.0 0.0 #(struct:overlay #(struct:translate 5.0"
 #" 5.0 #(struct:overlay #(struct:translate 2.0 2.0 #(struct:overlay #("
 #"struct:translate 14.5 8.0 #(struct:translate 3.5 10.0 #(struct:text "
 #"\"r\" 0 1 \"black\" 20 #f swiss normal normal #f))) #(struct:transla"
 #"te 0 0 #(struct:translate 18 18 #(struct:ellipse 36 36 0 255 \"white"
 #"\"))))) #(struct:translate 0 0 #(struct:translate 20 20 #(struct:ell"
 #"ipse 40 40 0 255 \"red\"))))) #(struct:translate 0 0 #(struct:transl"
 #"ate 25 25 #(struct:ellipse 50 50 0 255 \"transparent\"))))) #(struct"
 #":translate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:point 50 "
 #"0) #(struct:point 50 150) #(struct:point 0 150)) #(struct:translate "
 #"0 0 #(struct:overlay #(struct:translate 0 100 #(struct:overlay #(str"
 #"uct:translate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:point "
 #"50 0) #(struct:point 50 50) #(struct:point 0 50)) #(struct:translate"
 #" 0 0 #(struct:overlay #(struct:translate 0.0 0.0 #(struct:overlay #("
 #"struct:translate 5.0 5.0 #(struct:overlay #(struct:translate 2.0 2.0"
 #" #(struct:overlay #(struct:translate 10.0 8.0 #(struct:translate 8.0"
 #" 10.0 #(struct:text \"\303\230\" 0 1 \"black\" 20 #f swiss normal no"
 #"rmal #f))) #(struct:translate 0 0 #(struct:translate 18 18 #(struct:"
 #"ellipse 36 36 0 255 \"white\"))))) #(struct:translate 0 0 #(struct:t"
 #"ranslate 20 20 #(struct:ellipse 40 40 0 255 \"red\"))))) #(struct:tr"
 #"anslate 0 0 #(struct:translate 25 25 #(struct:ellipse 50 50 0 255 \""
 #"transparent\"))))) #(struct:translate 0 0 #(struct:translate 0 0 #(s"
 #"truct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-po"
 #"int 0 0 50 0 0 0) #(struct:pulled-point 0 0 50 50 0 0) #(struct:pull"
 #"ed-point 0 0 0 50 0 0)) 255 \"transparent\"))))))) #(struct:translat"
 #"e 50 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-poin"
 #"t 0 0 0 0 0 0) #(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-po"
 #"int 0 0 0 0 0 0) #(struct:pulled-point 0 0 0 0 0 0)) 255 \"transpare"
 #"nt\"))))) #(struct:translate 0 0 #(struct:translate 0 0 #(struct:ove"
 #"rlay #(struct:line-segment #(struct:point 25 25) #(struct:point 25 1"
 #"25) \"black\") #(struct:translate 0 0 #(struct:polygon (#(struct:pul"
 #"led-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 50 0 0 0) #(struct:"
 #"pulled-point 0 0 50 150 0 0) #(struct:pulled-point 0 0 0 150 0 0)) 2"
 #"55 \"transparent\"))))))))))))) #(struct:translate 50 0 #(struct:tra"
 #"nslate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(st"
 #"ruct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 0 0 0 0) #("
 #"struct:pulled-point 0 0 0 0 0 0)) 255 \"transparent\"))))))))) #(str"
 #"uct:translate 0 0 #(struct:translate 0 0 #(struct:overlay #(struct:l"
 #"ine-segment #(struct:point 150 25) #(struct:point 50 125) \"black\")"
 #" #(struct:translate 0 0 #(struct:overlay #(struct:line-segment #(str"
 #"uct:point 150 25) #(struct:point 175 125) \"black\") #(struct:transl"
 #"ate 0 0 #(struct:overlay #(struct:line-segment #(struct:point 150 25"
 #") #(struct:point 275 125) \"black\") #(struct:translate 0 0 #(struct"
 #":polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0"
 #" 0 300 0 0 0) #(struct:pulled-point 0 0 300 350 0 0) #(struct:pulled"
 #"-point 0 0 0 350 0 0)) 255 \"transparent\")))))))))))))))) #(struct:"
 #"bb 300 350 350.0) #f)"
) 0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 13 #"; Exercise 12"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 17 #"; PT String -> PT"
0 0 25 29 1 #"\n"
0 0 17 3 35 #"; Add a new word in to the given PT"
0 0 25 29 1 #"\n"
0 0 17 3 69
(
 #"; When we get a word, we need to search if it is match with some wor"
 #"d"
) 0 0 25 29 1 #"\n"
0 0 17 3 70
(
 #"; which is already in the PT. If true, return the original PT. If no"
 #"t,"
) 0 0 25 29 1 #"\n"
0 0 17 3 36 #"; we need to push it in to the tree."
0 0 25 29 1 #"\n"
0 0 17 3 77
(
 #"; First, we need to check if the first letter of the given string is"
 #" equal to"
) 0 0 25 29 1 #"\n"
0 0 17 3 74
(
 #"; the father node of the given PT. If matched, we need to continual "
 #"search"
) 0 0 25 29 1 #"\n"
0 0 17 3 72
(
 #"; the rest part of the word in each value of the child nodes of this"
 #" PT."
) 0 0 25 29 1 #"\n"
0 0 17 3 63
#"; If not matched, we need to creat a new node of the given word"
0 0 25 29 1 #"\n"
0 0 17 3 37 #"; on the same laveal of the given PT."
0 0 25 29 1 #"\n"
0 0 17 3 60
#"; The puepose of the helper function to to creat a recursive"
0 0 25 29 1 #"\n"
0 0 17 3 42 #"; to search same letter in the list of PT."
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 8 #"add-word"
0 0 25 3 1 #" "
0 0 14 3 2 #"pt"
0 0 25 3 1 #" "
0 0 14 3 4 #"word"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 25 3 2 #" ["
0 0 17 3 47 #"; [ListOf PT] [ListOf Character] -> [ListOf PT]"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 10 #"add-a-word"
0 0 25 3 1 #" "
0 0 14 3 2 #"lp"
0 0 25 3 1 #" "
0 0 14 3 4 #"word"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"            ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"              [("
0 0 14 3 6 #"empty?"
0 0 25 3 1 #" "
0 0 14 3 4 #"word"
0 0 25 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 8 #"make-end"
0 0 25 3 2 #") "
0 0 14 3 2 #"lp"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"              [("
0 0 14 3 6 #"empty?"
0 0 25 3 1 #" "
0 0 14 3 2 #"lp"
0 0 25 3 3 #") ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 5 #"foldr"
0 0 25 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 25 3 2 #" ("
0 0 14 3 1 #"c"
0 0 25 3 1 #" "
0 0 14 3 1 #"r"
0 0 25 3 3 #") ("
0 0 14 3 9 #"make-node"
0 0 25 3 1 #" "
0 0 14 3 1 #"c"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 14 3 1 #"r"
0 0 25 3 5 #"))) ("
0 0 14 3 8 #"make-end"
0 0 25 3 2 #") "
0 0 14 3 4 #"word"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"              [("
0 0 14 3 4 #"end?"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 2 #"lp"
0 0 25 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 2 #"lp"
0 0 25 3 3 #") ("
0 0 14 3 10 #"add-a-word"
0 0 25 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 2 #"lp"
0 0 25 3 2 #") "
0 0 14 3 4 #"word"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 15 #"              ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 6 #"char=?"
0 0 25 3 2 #" ("
0 0 14 3 9 #"node-char"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 2 #"lp"
0 0 25 3 4 #")) ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 4 #"word"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 25 #"                        ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 25 3 2 #" ("
0 0 14 3 9 #"node-char"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 2 #"lp"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 42 #"                                         ("
0 0 14 3 10 #"add-a-word"
0 0 25 3 2 #" ("
0 0 14 3 10 #"node-nodes"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 2 #"lp"
0 0 25 3 4 #")) ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 4 #"word"
0 0 25 3 5 #"))) ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 2 #"lp"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 25 #"                        ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 2 #"lp"
0 0 25 3 3 #") ("
0 0 14 3 10 #"add-a-word"
0 0 25 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 2 #"lp"
0 0 25 3 2 #") "
0 0 14 3 4 #"word"
0 0 25 3 7 #")))]))]"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 6 #"match?"
0 0 25 3 2 #" ("
0 0 14 3 12 #"string->list"
0 0 25 3 1 #" "
0 0 14 3 4 #"word"
0 0 25 3 2 #") "
0 0 14 3 2 #"pt"
0 0 25 3 2 #") "
0 0 14 3 2 #"pt"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 14 3 9 #"make-node"
0 0 25 3 1 #" "
0 0 14 3 5 #"empty"
0 0 25 3 2 #" ("
0 0 14 3 10 #"add-a-word"
0 0 25 3 2 #" ("
0 0 14 3 10 #"node-nodes"
0 0 25 3 1 #" "
0 0 14 3 2 #"pt"
0 0 25 3 3 #") ("
0 0 14 3 12 #"string->list"
0 0 25 3 1 #" "
0 0 14 3 4 #"word"
0 0 25 3 6 #"))))))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 8 #"add-word"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 9 #"make-node"
0 0 25 3 1 #" "
0 0 14 3 5 #"empty"
0 0 25 29 1 #"\n"
0 0 25 3 27 #"                          ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\o"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\f"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\f"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 8 #"make-end"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 3 54 #"                                                     ("
0 0 14 3 8 #"make-end"
0 0 25 3 6 #"))))) "
0 0 19 3 5 #"\"oft\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 15 #"              ("
0 0 14 3 9 #"make-node"
0 0 25 3 1 #" "
0 0 14 3 5 #"empty"
0 0 25 29 1 #"\n"
0 0 25 3 26 #"                         ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\o"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\f"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\f"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 8 #"make-end"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 74
(
 #"                                                                    "
 #"     ("
) 0 0 14 3 9 #"make-node"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\t"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 8 #"make-end"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 3 53 #"                                                    ("
0 0 14 3 8 #"make-end"
0 0 25 3 6 #"))))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 13 #"; Exercise 13"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 9 #"pt->image"
0 0 25 3 2 #" ("
0 0 14 3 8 #"add-word"
0 0 25 3 1 #" "
0 0 14 3 3 #"pt0"
0 0 25 3 1 #" "
0 0 19 3 4 #"\"hi\""
0 0 25 3 3 #")) "
0 6           4 81 20956
(
 #"(#(struct:overlay #(struct:translate 0 0 #(struct:crop (#(struct:poi"
 #"nt 0 0) #(struct:point 300 0) #(struct:point 300 350) #(struct:point"
 #" 0 350)) #(struct:translate 0 0 #(struct:overlay #(struct:translate "
 #"125.0 0.0 #(struct:overlay #(struct:translate 5.0 5.0 #(struct:overl"
 #"ay #(struct:translate 2.0 2.0 #(struct:overlay #(struct:translate 12"
 #".5 8.0 #(struct:translate 5.5 10.0 #(struct:text \"o\" 0 1 \"black\""
 #" 20 #f swiss normal normal #f))) #(struct:translate 0 0 #(struct:tra"
 #"nslate 18 18 #(struct:ellipse 36 36 0 255 \"white\"))))) #(struct:tr"
 #"anslate 0 0 #(struct:translate 20 20 #(struct:ellipse 40 40 0 255 \""
 #"red\"))))) #(struct:translate 0 0 #(struct:translate 25 25 #(struct:"
 #"ellipse 50 50 0 255 \"transparent\"))))) #(struct:translate 0 0 #(st"
 #"ruct:crop (#(struct:point 0 0) #(struct:point 300 0) #(struct:point "
 #"300 350) #(struct:point 0 350)) #(struct:translate 0 0 #(struct:over"
 #"lay #(struct:translate 0 100 #(struct:overlay #(struct:translate 0 0"
 #" #(struct:crop (#(struct:point 0 0) #(struct:point 100 0) #(struct:p"
 #"oint 100 250) #(struct:point 0 250)) #(struct:translate 0 0 #(struct"
 #":overlay #(struct:translate 25.0 0.0 #(struct:overlay #(struct:trans"
 #"late 5.0 5.0 #(struct:overlay #(struct:translate 2.0 2.0 #(struct:ov"
 #"erlay #(struct:translate 12.5 8.0 #(struct:translate 5.5 10.0 #(stru"
 #"ct:text \"n\" 0 1 \"black\" 20 #f swiss normal normal #f))) #(struct"
 #":translate 0 0 #(struct:translate 18 18 #(struct:ellipse 36 36 0 255"
 #" \"white\"))))) #(struct:translate 0 0 #(struct:translate 20 20 #(st"
 #"ruct:ellipse 40 40 0 255 \"red\"))))) #(struct:translate 0 0 #(struc"
 #"t:translate 25 25 #(struct:ellipse 50 50 0 255 \"transparent\"))))) "
 #"#(struct:translate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:p"
 #"oint 100 0) #(struct:point 100 250) #(struct:point 0 250)) #(struct:"
 #"translate 0 0 #(struct:overlay #(struct:translate 0 100 #(struct:ove"
 #"rlay #(struct:translate 0 0 #(struct:crop (#(struct:point 0 0) #(str"
 #"uct:point 50 0) #(struct:point 50 50) #(struct:point 0 50)) #(struct"
 #":translate 0 0 #(struct:overlay #(struct:translate 0.0 0.0 #(struct:"
 #"overlay #(struct:translate 5.0 5.0 #(struct:overlay #(struct:transla"
 #"te 2.0 2.0 #(struct:overlay #(struct:translate 10.0 8.0 #(struct:tra"
 #"nslate 8.0 10.0 #(struct:text \"\303\230\" 0 1 \"black\" 20 #f swiss"
 #" normal normal #f))) #(struct:translate 0 0 #(struct:translate 18 18"
 #" #(struct:ellipse 36 36 0 255 \"white\"))))) #(struct:translate 0 0 "
 #"#(struct:translate 20 20 #(struct:ellipse 40 40 0 255 \"red\"))))) #"
 #"(struct:translate 0 0 #(struct:translate 25 25 #(struct:ellipse 50 5"
 #"0 0 255 \"transparent\"))))) #(struct:translate 0 0 #(struct:transla"
 #"te 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct"
 #":pulled-point 0 0 50 0 0 0) #(struct:pulled-point 0 0 50 50 0 0) #(s"
 #"truct:pulled-point 0 0 0 50 0 0)) 255 \"transparent\"))))))) #(struc"
 #"t:translate 50 0 #(struct:overlay #(struct:translate 0 0 #(struct:cr"
 #"op (#(struct:point 0 0) #(struct:point 50 0) #(struct:point 50 150) "
 #"#(struct:point 0 150)) #(struct:translate 0 0 #(struct:overlay #(str"
 #"uct:translate 0.0 0.0 #(struct:overlay #(struct:translate 5.0 5.0 #("
 #"struct:overlay #(struct:translate 2.0 2.0 #(struct:overlay #(struct:"
 #"translate 12.5 8.0 #(struct:translate 5.5 10.0 #(struct:text \"e\" 0"
 #" 1 \"black\" 20 #f swiss normal normal #f))) #(struct:translate 0 0 "
 #"#(struct:translate 18 18 #(struct:ellipse 36 36 0 255 \"white\")))))"
 #" #(struct:translate 0 0 #(struct:translate 20 20 #(struct:ellipse 40"
 #" 40 0 255 \"red\"))))) #(struct:translate 0 0 #(struct:translate 25 "
 #"25 #(struct:ellipse 50 50 0 255 \"transparent\"))))) #(struct:transl"
 #"ate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:point 50 0) #(st"
 #"ruct:point 50 150) #(struct:point 0 150)) #(struct:translate 0 0 #(s"
 #"truct:overlay #(struct:translate 0 100 #(struct:overlay #(struct:tra"
 #"nslate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:point 50 0) #"
 #"(struct:point 50 50) #(struct:point 0 50)) #(struct:translate 0 0 #("
 #"struct:overlay #(struct:translate 0.0 0.0 #(struct:overlay #(struct:"
 #"translate 5.0 5.0 #(struct:overlay #(struct:translate 2.0 2.0 #(stru"
 #"ct:overlay #(struct:translate 10.0 8.0 #(struct:translate 8.0 10.0 #"
 #"(struct:text \"\303\230\" 0 1 \"black\" 20 #f swiss normal normal #f"
 #"))) #(struct:translate 0 0 #(struct:translate 18 18 #(struct:ellipse"
 #" 36 36 0 255 \"white\"))))) #(struct:translate 0 0 #(struct:translat"
 #"e 20 20 #(struct:ellipse 40 40 0 255 \"red\"))))) #(struct:translate"
 #" 0 0 #(struct:translate 25 25 #(struct:ellipse 50 50 0 255 \"transpa"
 #"rent\"))))) #(struct:translate 0 0 #(struct:translate 0 0 #(struct:p"
 #"olygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0"
 #" 50 0 0 0) #(struct:pulled-point 0 0 50 50 0 0) #(struct:pulled-poin"
 #"t 0 0 0 50 0 0)) 255 \"transparent\"))))))) #(struct:translate 50 0 "
 #"#(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0"
 #" 0 0 0) #(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0"
 #" 0 0 0 0) #(struct:pulled-point 0 0 0 0 0 0)) 255 \"transparent\")))"
 #")) #(struct:translate 0 0 #(struct:translate 0 0 #(struct:overlay #("
 #"struct:line-segment #(struct:point 25 25) #(struct:point 25 125) \"b"
 #"lack\") #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-poi"
 #"nt 0 0 0 0 0 0) #(struct:pulled-point 0 0 50 0 0 0) #(struct:pulled-"
 #"point 0 0 50 150 0 0) #(struct:pulled-point 0 0 0 150 0 0)) 255 \"tr"
 #"ansparent\"))))))))))))) #(struct:translate 50 0 #(struct:translate "
 #"0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pu"
 #"lled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 0 0 0 0) #(struct:"
 #"pulled-point 0 0 0 0 0 0)) 255 \"transparent\"))))))) #(struct:trans"
 #"late 0 0 #(struct:translate 0 0 #(struct:overlay #(struct:line-segme"
 #"nt #(struct:point 50 25) #(struct:point 25 125) \"black\") #(struct:"
 #"translate 0 0 #(struct:overlay #(struct:line-segment #(struct:point "
 #"50 25) #(struct:point 75 125) \"black\") #(struct:translate 0 0 #(st"
 #"ruct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-poi"
 #"nt 0 0 100 0 0 0) #(struct:pulled-point 0 0 100 250 0 0) #(struct:pu"
 #"lled-point 0 0 0 250 0 0)) 255 \"transparent\"))))))))))))))) #(stru"
 #"ct:translate 100 0 #(struct:overlay #(struct:translate 0 0 #(struct:"
 #"crop (#(struct:point 0 0) #(struct:point 150 0) #(struct:point 150 2"
 #"50) #(struct:point 0 250)) #(struct:translate 0 0 #(struct:overlay #"
 #"(struct:translate 50.0 0.0 #(struct:overlay #(struct:translate 5.0 5"
 #".0 #(struct:overlay #(struct:translate 2.0 2.0 #(struct:overlay #(st"
 #"ruct:translate 15.0 8.0 #(struct:translate 3.0 10.0 #(struct:text \""
 #"f\" 0 1 \"black\" 20 #f swiss normal normal #f))) #(struct:translate"
 #" 0 0 #(struct:translate 18 18 #(struct:ellipse 36 36 0 255 \"white\""
 #"))))) #(struct:translate 0 0 #(struct:translate 20 20 #(struct:ellip"
 #"se 40 40 0 255 \"red\"))))) #(struct:translate 0 0 #(struct:translat"
 #"e 25 25 #(struct:ellipse 50 50 0 255 \"transparent\"))))) #(struct:t"
 #"ranslate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:point 150 0"
 #") #(struct:point 150 250) #(struct:point 0 250)) #(struct:translate "
 #"0 0 #(struct:overlay #(struct:translate 0 100 #(struct:overlay #(str"
 #"uct:translate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:point "
 #"50 0) #(struct:point 50 50) #(struct:point 0 50)) #(struct:translate"
 #" 0 0 #(struct:overlay #(struct:translate 0.0 0.0 #(struct:overlay #("
 #"struct:translate 5.0 5.0 #(struct:overlay #(struct:translate 2.0 2.0"
 #" #(struct:overlay #(struct:translate 10.0 8.0 #(struct:translate 8.0"
 #" 10.0 #(struct:text \"\303\230\" 0 1 \"black\" 20 #f swiss normal no"
 #"rmal #f))) #(struct:translate 0 0 #(struct:translate 18 18 #(struct:"
 #"ellipse 36 36 0 255 \"white\"))))) #(struct:translate 0 0 #(struct:t"
 #"ranslate 20 20 #(struct:ellipse 40 40 0 255 \"red\"))))) #(struct:tr"
 #"anslate 0 0 #(struct:translate 25 25 #(struct:ellipse 50 50 0 255 \""
 #"transparent\"))))) #(struct:translate 0 0 #(struct:translate 0 0 #(s"
 #"truct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-po"
 #"int 0 0 50 0 0 0) #(struct:pulled-point 0 0 50 50 0 0) #(struct:pull"
 #"ed-point 0 0 0 50 0 0)) 255 \"transparent\"))))))) #(struct:translat"
 #"e 50 0 #(struct:overlay #(struct:translate 0 0 #(struct:crop (#(stru"
 #"ct:point 0 0) #(struct:point 50 0) #(struct:point 50 150) #(struct:p"
 #"oint 0 150)) #(struct:translate 0 0 #(struct:overlay #(struct:transl"
 #"ate 0.0 0.0 #(struct:overlay #(struct:translate 5.0 5.0 #(struct:ove"
 #"rlay #(struct:translate 2.0 2.0 #(struct:overlay #(struct:translate "
 #"15.0 8.0 #(struct:translate 3.0 10.0 #(struct:text \"f\" 0 1 \"black"
 #"\" 20 #f swiss normal normal #f))) #(struct:translate 0 0 #(struct:t"
 #"ranslate 18 18 #(struct:ellipse 36 36 0 255 \"white\"))))) #(struct:"
 #"translate 0 0 #(struct:translate 20 20 #(struct:ellipse 40 40 0 255 "
 #"\"red\"))))) #(struct:translate 0 0 #(struct:translate 25 25 #(struc"
 #"t:ellipse 50 50 0 255 \"transparent\"))))) #(struct:translate 0 0 #("
 #"struct:crop (#(struct:point 0 0) #(struct:point 50 0) #(struct:point"
 #" 50 150) #(struct:point 0 150)) #(struct:translate 0 0 #(struct:over"
 #"lay #(struct:translate 0 100 #(struct:overlay #(struct:translate 0 0"
 #" #(struct:crop (#(struct:point 0 0) #(struct:point 50 0) #(struct:po"
 #"int 50 50) #(struct:point 0 50)) #(struct:translate 0 0 #(struct:ove"
 #"rlay #(struct:translate 0.0 0.0 #(struct:overlay #(struct:translate "
 #"5.0 5.0 #(struct:overlay #(struct:translate 2.0 2.0 #(struct:overlay"
 #" #(struct:translate 10.0 8.0 #(struct:translate 8.0 10.0 #(struct:te"
 #"xt \"\303\230\" 0 1 \"black\" 20 #f swiss normal normal #f))) #(stru"
 #"ct:translate 0 0 #(struct:translate 18 18 #(struct:ellipse 36 36 0 2"
 #"55 \"white\"))))) #(struct:translate 0 0 #(struct:translate 20 20 #("
 #"struct:ellipse 40 40 0 255 \"red\"))))) #(struct:translate 0 0 #(str"
 #"uct:translate 25 25 #(struct:ellipse 50 50 0 255 \"transparent\"))))"
 #") #(struct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#("
 #"struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 50 0 0 0)"
 #" #(struct:pulled-point 0 0 50 50 0 0) #(struct:pulled-point 0 0 0 50"
 #" 0 0)) 255 \"transparent\"))))))) #(struct:translate 50 0 #(struct:t"
 #"ranslate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #("
 #"struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 0 0 0 0) "
 #"#(struct:pulled-point 0 0 0 0 0 0)) 255 \"transparent\"))))) #(struc"
 #"t:translate 0 0 #(struct:translate 0 0 #(struct:overlay #(struct:lin"
 #"e-segment #(struct:point 25 25) #(struct:point 25 125) \"black\") #("
 #"struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0"
 #" 0 0) #(struct:pulled-point 0 0 50 0 0 0) #(struct:pulled-point 0 0 "
 #"50 150 0 0) #(struct:pulled-point"
 #" 0 0 0 150 0 0)) 255 \"transparent\"))))))))))))) #(struct:translate"
 #" 50 0 #(struct:overlay #(struct:translate 0 0 #(struct:crop (#(struc"
 #"t:point 0 0) #(struct:point 50 0) #(struct:point 50 150) #(struct:po"
 #"int 0 150)) #(struct:translate 0 0 #(struct:overlay #(struct:transla"
 #"te 0.0 0.0 #(struct:overlay #(struct:translate 5.0 5.0 #(struct:over"
 #"lay #(struct:translate 2.0 2.0 #(struct:overlay #(struct:translate 1"
 #"5.0 8.0 #(struct:translate 3.0 1"
 #"0.0 #(struct:text \"t\" 0 1 \"black\" 20 #f swiss normal normal #f))"
 #") #(struct:translate 0 0 #(struct:translate 18 18 #(struct:ellipse 3"
 #"6 36 0 255 \"white\"))))) #(struct:translate 0 0 #(struct:translate "
 #"20 20 #(struct:ellipse 40 40 0 255 \"red\"))))) #(struct:translate 0"
 #" 0 #(struct:translate 25 25 #(struct:ellipse 50 50 0 255 \"transpare"
 #"nt\"))))) #(struct:translate 0 0 #(struct:crop (#(struct:point 0 0) "
 #"#(struct:point 50 0) #(struct:point 50 150) #(struct:point 0 150)) #"
 #"(struct:translate 0 0 #(struct:overlay #(struct:translate 0 100 #(st"
 #"ruct:overlay #(struct:translate 0 0 #(struct:crop (#(struct:point 0 "
 #"0) #(struct:point 50 0) #(struct:point 50 50) #(struct:point 0 50)) "
 #"#(struct:translate 0 0 #(struct:overlay #(struct:translate 0.0 0.0 #"
 #"(struct:overlay #(struct:translate 5.0 5.0 #(struct:overlay #(struct"
 #":translate 2.0 2.0 #(struct:overlay #(struct:translate 10.0 8.0 #(st"
 #"ruct:translate 8.0 10.0 #(struct:text \"\303\230\" 0 1 \"black\" 20 "
 #"#f swiss normal normal #f))) #(struct:translate 0 0 #(struct:transla"
 #"te 18 18 #(struct:ellipse 36 36 0 255 \"white\"))))) #(struct:transl"
 #"ate 0 0 #(struct:translate 20 20 "
 #"#(struct:ellipse 40 40 0 255 \"red\"))))) #(struct:translate 0 0 #(s"
 #"truct:translate 25 25 #(struct:ellipse 50 50 0 255 \"transparent\"))"
 #"))) #(struct:translate 0 0 #(struct:translate 0 0 #(struct:polygon ("
 #"#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 50 0 0 "
 #"0) #(struct:pulled-point 0 0 50 50 0 0) #(struct:pulled-point 0 0 0 "
 #"50 0 0)) 255 \"transparent\"))))))) #(struct:translate 50 0 #(struct"
 #":translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) "
 #"#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 0 0 0 0"
 #") #(struct:pulled-point 0 0 0 0 0 0)) 255 \"transparent\"))))) #(str"
 #"uct:translate 0 0 #(struct:translate 0 0 #(struct:overlay #(struct:l"
 #"ine-segment #(struct:point 25 25) #(struct:point 25 125) \"black\") "
 #"#(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0"
 #" 0 0 0) #(struct:pulled-point 0 0 50 0 0 0) #(struct:pulled-point 0 "
 #"0 50 150 0 0) #(struct:pulled-point 0 0 0 150 0 0)) 255 \"transparen"
 #"t\"))))))))))))) #(struct:translate 50 0 #(struct:translate 0 0 #(st"
 #"ruct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-poi"
 #"nt 0 0 0 0 0 0) #(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-p"
 #"oint 0 0 0 0 0 0)) 255 \"transparent\"))))))))) #(struct:translate 0"
 #" 0 #(struct:translate 0 0 #(struct:overlay #(struct:line-segment #(s"
 #"truct:point 75 25) #(struct:point 25 125) \"black\") #(struct:transl"
 #"ate 0 0 #(struct:overlay #(struct:line-segment #(struct:point 75 25)"
 #" #(struct:point 75 125) \"black\") #(struct:translate 0 0 #(struct:o"
 #"verlay #(struct:line-segment #(struct:point 75 25) #(struct:point 12"
 #"5 125) \"black\") #(struct:translate 0 0 #(struct:polygon (#(struct:"
 #"pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 150 0 0 0) #(str"
 #"uct:pulled-point 0 0 150 250 0 0) #(struct:pulled-point 0 0 0 250 0 "
 #"0)) 255 \"transparent\"))))))))))))))))) #(struct:translate 150 0 #("
 #"struct:overlay #(struct:translate 0 0 #(struct:crop (#(struct:point "
 #"0 0) #(struct:point 50 0) #(struct:point 50 150) #(struct:point 0 15"
 #"0)) #(struct:translate 0 0 #(struct:overlay #(struct:translate 0.0 0"
 #".0 #(struct:overlay #(struct:translate 5.0 5.0 #(struct:overlay #(st"
 #"ruct:translate 2.0 2.0 #(struct:overlay #(struct:translate 14.5 8.0 "
 #"#(struct:translate 3.5 10.0 #(struct:text \"r\" 0 1 \"black\" 20 #f "
 #"swiss normal normal #f))) #(struct:translate 0 0 #(struct:translate "
 #"18 18 #(struct:ellipse 36 36 0 255 \"white\"))))) #(struct:translate"
 #" 0 0 #(struct:translate 20 20 #(struct:ellipse 40 40 0 255 \"red\"))"
 #"))) #(struct:translate 0 0 #(struct:translate 25 25 #(struct:ellipse"
 #" 50 50 0 255 \"transparent\"))))) #(struct:translate 0 0 #(struct:cr"
 #"op (#(struct:point 0 0) #(struct:point 50 0) #(struct:point 50 150) "
 #"#(struct:point 0 150)) #(struct:translate 0 0 #(struct:overlay #(str"
 #"uct:translate 0 100 #(struct:overlay #(struct:translate 0 0 #(struct"
 #":crop (#(struct:point 0 0) #(struct:point 50 0) #(struct:point 50 50"
 #") #(struct:point 0 50)) #(struct:translate 0 0 #(struct:overlay #(st"
 #"ruct:translate 0.0 0.0 #(struct:overlay #(struct:translate 5.0 5.0 #"
 #"(struct:overlay #(struct:translate 2.0 2.0 #(struct:overlay #(struct"
 #":translate 10.0 8.0 #(struct:translate 8.0 10.0 #(struct:text \"\303"
 #"\230\" 0 1 \"black\" 20 #f swiss normal normal #f))) #(struct:transl"
 #"ate 0 0 #(struct:translate 18 18 #(struct:ellipse 36 36 0 255 \"whit"
 #"e\"))))) #(struct:translate 0 0 #(struct:translate 20 20 #(struct:el"
 #"lipse 40 40 0 255 \"red\"))))) #(struct:translate 0 0 #(struct:trans"
 #"late 25 25 #(struct:ellipse 50 50 0 255 \"transparent\"))))) #(struc"
 #"t:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pu"
 #"lled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 50 0 0 0) #(struct"
 #":pulled-point 0 0 50 50 0 0) #(struct:pulled-point 0 0 0 50 0 0)) 25"
 #"5 \"transparent\"))))))) #(struct:translate 50 0 #(struct:translate "
 #"0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pu"
 #"lled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 0 0 0 0) #(struct:"
 #"pulled-point 0 0 0 0 0 0)) 255 \"transparent\"))))) #(struct:transla"
 #"te 0 0 #(struct:translate 0 0 #(struct:overlay #(struct:line-segment"
 #" #(struct:point 25 25) #(struct:point 25 125) \"black\") #(struct:tr"
 #"anslate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(s"
 #"truct:pulled-point 0 0 50 0 0 0) #(struct:pulled-point 0 0 50 150 0 "
 #"0) #(struct:pulled-point 0 0 0 150 0 0)) 255 \"transparent\"))))))))"
 #"))))) #(struct:translate 50 0 #(struct:translate 0 0 #(struct:polygo"
 #"n (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 0 0 "
 #"0 0) #(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 0 "
 #"0 0 0)) 255 \"transparent\"))))))))) #(struct:translate 0 0 #(struct"
 #":translate 0 0 #(struct:overlay #(struct:line-segment #(struct:point"
 #" 150 25) #(struct:point 50 125) \"black\") #(struct:translate 0 0 #("
 #"struct:overlay #(struct:line-segment #(struct:point 150 25) #(struct"
 #":point 175 125) \"black\") #(struct:translate 0 0 #(struct:overlay #"
 #"(struct:line-segment #(struct:point 150 25) #(struct:point 275 125) "
 #"\"black\") #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-"
 #"point 0 0 0 0 0 0) #(struct:pulled-point 0 0 300 0 0 0) #(struct:pul"
 #"led-point 0 0 300 350 0 0) #(struct:pulled-point 0 0 0 350 0 0)) 255"
 #" \"transparent\"))))))))))))))))) #(struct:translate 300 0 #(struct:"
 #"overlay #(struct:translate 0 0 #(struct:crop (#(struct:point 0 0) #("
 #"struct:point 50 0) #(struct:point 50 250) #(struct:point 0 250)) #(s"
 #"truct:translate 0 0 #(struct:overlay #(struct:translate 0.0 0.0 #(st"
 #"ruct:overlay #(struct:translate 5.0 5.0 #(struct:overlay #(struct:tr"
 #"anslate 2.0 2.0 #(struct:overlay #(struct:translate 12.5 8.0 #(struc"
 #"t:translate 5.5 10.0 #(struct:text \"h\" 0 1 \"black\" 20 #f swiss n"
 #"ormal normal #f))) #(struct:translate 0 0 #(struct:translate 18 18 #"
 #"(struct:ellipse 36 36 0 255 \"white\"))))) #(struct:translate 0 0 #("
 #"struct:translate 20 20 #(struct:ellipse 40 40 0 255 \"red\"))))) #(s"
 #"truct:translate 0 0 #(struct:translate 25 25 #(struct:ellipse 50 50 "
 #"0 255 \"transparent\"))))) #(struct:translate 0 0 #(struct:crop (#(s"
 #"truct:point 0 0) #(struct:point 50 0) #(struct:point 50 250) #(struc"
 #"t:point 0 250)) #(struct:translate 0 0 #(struct:overlay #(struct:tra"
 #"nslate 0 100 #(struct:overlay #(struct:translate 0 0 #(struct:crop ("
 #"#(struct:point 0 0) #(struct:point 50 0) #(struct:point 50 150) #(st"
 #"ruct:point 0 150)) #(struct:translate 0 0 #(struct:overlay #(struct:"
 #"translate 0.0 0.0 #(struct:overlay #(struct:translate 5.0 5.0 #(stru"
 #"ct:overlay #(struct:translate 2.0 2.0 #(struct:overlay #(struct:tran"
 #"slate 16.0 8.0 #(struct:translate"
 #" 2.0 10.0 #(struct:text \"i\" 0 1 \"black\" 20 #f swiss normal norma"
 #"l #f))) #(struct:translate 0 0 #(struct:translate 18 18 #(struct:ell"
 #"ipse 36 36 0 255 \"white\"))))) #(struct:translate 0 0 #(struct:tran"
 #"slate 20 20 #(struct:ellipse 40 40 0 255 \"red\"))))) #(struct:trans"
 #"late 0 0 #(struct:translate 25 25 #(struct:ellipse 50 50 0 255 \"tra"
 #"nsparent\"))))) #(struct:translate 0 0 #(struct:crop (#(struct:point"
 #" 0 0) #(struct:point 50 0) #(struct:point 50 150) #(struct:point 0 1"
 #"50)) #(struct:translate 0 0 #(struct:overlay #(struct:translate 0 10"
 #"0 #(struct:overlay #(struct:translate 0 0 #(struct:crop (#(struct:po"
 #"int 0 0) #(struct:point 50 0) #(struct:point 50 50) #(struct:point 0"
 #" 50)) #(struct:translate 0 0 #(struct:overlay #(struct:translate 0.0"
 #" 0.0 #(struct:overlay #(struct:translate 5.0 5.0 #(struct:overlay #("
 #"struct:translate 2.0 2.0 #(struct:overlay #(struct:translate 10.0 8."
 #"0 #(struct:translate 8.0 10.0 #(struct:text \"\303\230\" 0 1 \"black"
 #"\" 20 #f swiss normal normal #f))) #(struct:translate 0 0 #(struct:t"
 #"ranslate 18 18 #(struct:ellipse 36 36 0 255 \"white\"))))) #(struct:"
 #"translate 0 0 #(struct:translate 20 20 #(struct:ellipse 40 40 0 255 "
 #"\"red\"))))) #(struct:translate 0 0 #(struct:translate 25 25 #(struc"
 #"t:ellipse 50 50 0 255 \"transparent\"))))) #(struct:translate 0 0 #("
 #"struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0"
 #" 0 0) #(struct:pulled-point 0 0 50 0 0 0) #(struct:pulled-point 0 0 "
 #"50 50 0 0) #(struct:pulled-point 0 0 0 50 0 0)) 255 \"transparent\")"
 #")))))) #(struct:translate 50 0 #(struct:translate 0 0 #(struct:polyg"
 #"on (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 0 0"
 #" 0 0) #(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 0"
 #" 0 0 0)) 255 \"transparent\"))))) #(struct:translate 0 0 #(struct:tr"
 #"anslate 0 0 #(struct:overlay #(struct:line-segment #(struct:point 25"
 #" 25) #(struct:point 25 125) \"black\") #(struct:translate 0 0 #(stru"
 #"ct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point"
 #" 0 0 50 0 0 0) #(struct:pulled-point 0 0 50 150 0 0) #(struct:pulled"
 #"-point 0 0 0 150 0 0)) 255 \"transparent\"))))))))))))) #(struct:tra"
 #"nslate 50 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled"
 #"-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 0 0 0 0) #(struct:pull"
 #"ed-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 0 0 0 0)) 255 \"tran"
 #"sparent\"))))) #(struct:translate 0 0 #(struct:translate 0 0 #(struc"
 #"t:overlay #(struct:line-segment #(struct:point 25 25) #(struct:point"
 #" 25 125) \"black\") #(struct:translate 0 0 #(struct:polygon (#(struc"
 #"t:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 50 0 0 0) #(st"
 #"ruct:pulled-point 0 0 50 250 0 0) #(struct:pulled-point 0 0 0 250 0 "
 #"0)) 255 \"transparent\"))))))))))))) #(struct:translate 50 0 #(struc"
 #"t:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0)"
 #" #(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 0 0 0 "
 #"0) #(struct:pulled-point 0 0 0 0 0 0)) 255 \"transparent\")))))) #(s"
 #"truct:bb 350 350 350.0) #f)"
) 0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 40 #"; A PTWord is : (make-pt-word PT String)"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 25 3 1 #" "
0 0 14 3 7 #"pt-word"
0 0 25 3 2 #" ("
0 0 14 3 2 #"pt"
0 0 25 3 1 #" "
0 0 14 3 4 #"word"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 17 #"; PTWord -> Image"
0 0 25 29 1 #"\n"
0 0 17 3 42 #"; Draw both input word and PT in one image"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 12 #"draw-pt-word"
0 0 25 3 1 #" "
0 0 14 3 2 #"pw"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 25 3 2 #" ["
0 0 17 3 14 #"; Image String"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 7 #"combine"
0 0 25 3 1 #" "
0 0 14 3 2 #"pt"
0 0 25 3 1 #" "
0 0 14 3 4 #"word"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"            ("
0 0 14 3 17 #"place-image/align"
0 0 25 3 2 #" ("
0 0 14 3 4 #"text"
0 0 25 3 1 #" "
0 0 14 3 4 #"word"
0 0 25 3 1 #" "
0 0 22 3 2 #"20"
0 0 25 3 1 #" "
0 0 19 3 7 #"\"black\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 31 #"                               "
0 0 22 3 2 #"10"
0 0 25 3 1 #" "
0 0 22 3 2 #"10"
0 0 25 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 25 3 1 #" "
0 0 19 3 5 #"\"top\""
0 0 25 29 1 #"\n"
0 0 25 3 32 #"                               ("
0 0 14 3 11 #"place-image"
0 0 25 3 1 #" "
0 0 14 3 2 #"pt"
0 0 25 3 1 #" "
0 0 22 3 3 #"500"
0 0 25 3 1 #" "
0 0 22 3 3 #"520"
0 0 25 29 1 #"\n"
0 0 25 3 45 #"                                            ("
0 0 14 3 11 #"empty-scene"
0 0 25 3 1 #" "
0 0 22 3 4 #"1000"
0 0 25 3 1 #" "
0 0 22 3 4 #"1020"
0 0 25 3 5 #"))))]"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 7 #"combine"
0 0 25 3 2 #" ("
0 0 14 3 9 #"pt->image"
0 0 25 3 2 #" ("
0 0 14 3 10 #"pt-word-pt"
0 0 25 3 1 #" "
0 0 14 3 2 #"pw"
0 0 25 3 4 #")) ("
0 0 14 3 12 #"pt-word-word"
0 0 25 3 1 #" "
0 0 14 3 2 #"pw"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 25 #"; PTWord String -> PTWord"
0 0 25 29 1 #"\n"
0 0 17 3 37 #"; Make the given letter in the PTWord"
0 0 25 29 1 #"\n"
0 0 17 3 70
(
 #"; We will type a word. If we type any letter no matter capital or no"
 #"t,"
) 0 0 25 29 1 #"\n"
0 0 17 3 89
(
 #"; we can push it in to the word list wich will apeal on the left top"
 #" conner of the image."
) 0 0 25 29 1 #"\n"
0 0 17 3 74
(
 #"; Then if we type return, we can add the word list to the PT, and dr"
 #"aw it."
) 0 0 25 29 1 #"\n"
0 0 17 3 71
(
 #"; If we type backspeace, we can delet the last letter in the word li"
 #"st."
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 8 #"get-word"
0 0 25 3 1 #" "
0 0 14 3 2 #"pw"
0 0 25 3 1 #" "
0 0 14 3 2 #"ke"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 8 #"string=?"
0 0 25 3 1 #" "
0 0 19 3 4 #"\"\\r\""
0 0 25 3 1 #" "
0 0 14 3 2 #"ke"
0 0 25 3 3 #") ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"zero?"
0 0 25 3 2 #" ("
0 0 14 3 13 #"string-length"
0 0 25 3 2 #" ("
0 0 14 3 12 #"pt-word-word"
0 0 25 3 1 #" "
0 0 14 3 2 #"pw"
0 0 25 3 4 #"))) "
0 0 14 3 2 #"pw"
0 0 25 29 1 #"\n"
0 0 25 3 29 #"                            ("
0 0 14 3 12 #"make-pt-word"
0 0 25 3 2 #" ("
0 0 14 3 8 #"add-word"
0 0 25 3 2 #" ("
0 0 14 3 10 #"pt-word-pt"
0 0 25 3 1 #" "
0 0 14 3 2 #"pw"
0 0 25 3 3 #") ("
0 0 14 3 12 #"pt-word-word"
0 0 25 3 1 #" "
0 0 14 3 2 #"pw"
0 0 25 3 3 #")) "
0 0 19 3 2 #"\"\""
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 8 #"string=?"
0 0 25 3 1 #" "
0 0 19 3 4 #"\"\\b\""
0 0 25 3 1 #" "
0 0 14 3 2 #"ke"
0 0 25 3 3 #") ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"zero?"
0 0 25 3 2 #" ("
0 0 14 3 13 #"string-length"
0 0 25 3 2 #" ("
0 0 14 3 12 #"pt-word-word"
0 0 25 3 1 #" "
0 0 14 3 2 #"pw"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 28 #"                            "
0 0 14 3 2 #"pw"
0 0 25 29 1 #"\n"
0 0 25 3 29 #"                            ("
0 0 14 3 12 #"make-pt-word"
0 0 25 3 2 #" ("
0 0 14 3 10 #"pt-word-pt"
0 0 25 3 1 #" "
0 0 14 3 2 #"pw"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 43 #"                                          ("
0 0 14 3 9 #"substring"
0 0 25 3 2 #" ("
0 0 14 3 12 #"pt-word-word"
0 0 25 3 1 #" "
0 0 14 3 2 #"pw"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 53 #"                                                     "
0 0 22 3 1 #"0"
0 0 25 3 2 #" ("
0 0 14 3 4 #"sub1"
0 0 25 3 2 #" ("
0 0 14 3 13 #"string-length"
0 0 25 3 2 #" ("
0 0 14 3 12 #"pt-word-word"
0 0 25 3 1 #" "
0 0 14 3 2 #"pw"
0 0 25 3 7 #"))))))]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 3 #"and"
0 0 25 3 2 #" ("
0 0 14 3 1 #"="
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 2 #" ("
0 0 14 3 13 #"string-length"
0 0 25 3 1 #" "
0 0 14 3 2 #"ke"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 8 #"string=?"
0 0 25 3 1 #" "
0 0 19 3 4 #"\"\\t\""
0 0 25 3 1 #" "
0 0 14 3 2 #"ke"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 14 3 2 #"or"
0 0 25 3 2 #" ("
0 0 14 3 3 #"and"
0 0 25 3 2 #" ("
0 0 14 3 7 #"char<=?"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\a"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 2 #" ("
0 0 14 3 12 #"string->list"
0 0 25 3 1 #" "
0 0 14 3 2 #"ke"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 20 #"                   ("
0 0 14 3 7 #"char>=?"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\z"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 2 #" ("
0 0 14 3 12 #"string->list"
0 0 25 3 1 #" "
0 0 14 3 2 #"ke"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 15 #"              ("
0 0 14 3 3 #"and"
0 0 25 3 2 #" ("
0 0 14 3 7 #"char<=?"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\A"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 2 #" ("
0 0 14 3 12 #"string->list"
0 0 25 3 1 #" "
0 0 14 3 2 #"ke"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 20 #"                   ("
0 0 14 3 7 #"char>=?"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\Z"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 2 #" ("
0 0 14 3 12 #"string->list"
0 0 25 3 1 #" "
0 0 14 3 2 #"ke"
0 0 25 3 8 #")))))) ("
0 0 14 3 12 #"make-pt-word"
0 0 25 3 2 #" ("
0 0 14 3 10 #"pt-word-pt"
0 0 25 3 1 #" "
0 0 14 3 2 #"pw"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 77
(
 #"                                                                    "
 #"        ("
) 0 0 14 3 13 #"string-append"
0 0 25 3 2 #" ("
0 0 14 3 12 #"pt-word-word"
0 0 25 3 1 #" "
0 0 14 3 2 #"pw"
0 0 25 3 2 #") "
0 0 14 3 2 #"ke"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 25 3 1 #" "
0 0 14 3 2 #"pw"
0 0 25 3 3 #"]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 8 #"big-bang"
0 0 25 3 2 #" ("
0 0 14 3 12 #"make-pt-word"
0 0 25 3 1 #" "
0 0 14 3 3 #"pt0"
0 0 25 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ["
0 0 14 3 7 #"to-draw"
0 0 25 3 1 #" "
0 0 14 3 12 #"draw-pt-word"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ["
0 0 14 3 6 #"on-key"
0 0 25 3 1 #" "
0 0 14 3 8 #"get-word"
0 0 25 3 2 #"])"
0           0
